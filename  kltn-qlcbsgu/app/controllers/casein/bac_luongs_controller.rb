# Scaffolding generated by Casein v.3.1.11

module Casein
  class BacLuongsController < Casein::CaseinController
  
    ## optional filters for defining usage according to Casein::Users access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = Param.get_param_value "bac_luong_index_page_title"
      @bac_luongs_xls  = BacLuong.all
  		@bac_luongs = BacLuong.paginate :page => params[:page], :order=> [:ngach_id, :bac], :per_page => 8
      @bac_luongs_group = []
      arr = []
      @max = 0
      if !BacLuong.all.empty?
        BacLuong.all.each { |b| 
          arr = arr.push b.bac
        }
      end
      if !arr.empty?
        @max = arr.max
      end

      Ngach.all.each do |o|
        ngach = []
        hash = []
        BacLuong.all.each do |p|
          if p.ngach_id && p.ngach_id == o.id
            hash << {:id => p.id, :bac => p.bac, :ngach_id => p.ngach_id, :he_so_luong => p.he_so_luong, :vuot_khung => p.vuot_khung}
          end
        end
       ngach << {:ngach_id => o.ma_ngach, :ten_ngach => o.ten_ngach, :bac_luongs => hash}
       @bac_luongs_group << ngach
      end

      respond_to do |format|
        format.html
        format.xls{
          bac_luong = Spreadsheet::Workbook.new
          list = bac_luong.create_worksheet :name => 'Danh sach bac luong'
          list.row(0).concat %w{Ma_ngach Ten_ngach Bac He_so_luong Ghi_Chu}
          @bac_luongs_xls.each_with_index { |ct, i|
            list.row(i+1).push(ct.ngach.ma_ngach, ct.ngach.ten_ngach, ct.bac,ct.he_so_luong,ct.ghi_chu)
          }
          header_format = Spreadsheet::Format.new :color => :green, :weight => :bold
          list.row(0).default_format = header_format
          #output to blob object
          blob = StringIO.new("")
          bac_luong.write blob
          #respond with blob object as a file
          send_data blob.string, :type => :xls, :filename => "Danh_Sach_Bac_luong.xls"
        }
        format.json{
          render json:@bac_luongs_group
        }
      end
    end
  
    def show
      @casein_page_title = Param.get_param_value "bac_luong_show_page_title"
      @bac_luong = BacLuong.find params[:id]
    end

    def edit
      @casein_page_title = Param.get_param_value "bac_luong_edit_page_title"
      @bac_luong = BacLuong.find params[:id]
    end
 
    def new
      @casein_page_title = Param.get_param_value "bac_luong_new_page_title"
    	@bac_luong = BacLuong.new
    end

    def create

      @bac_luong = BacLuong.new params[:bac_luong]
      if params['vuot_khung'].to_s =="1"
        @bac_luong.vuot_khung = true
      end
      if BacLuong.check_exists @bac_luong.ngach_id, @bac_luong.bac
        flash.now[:warning] = "#{@bac_luong.ngach.ten_ngach} - B.#{@bac_luong.bac} #{Param.get_param_value "has_already_been_taken"}"
        render :action => :new
      else
        if @bac_luong.save
          flash[:notice] = Param.get_param_value("adding_success")
          redirect_to casein_bac_luongs_path
        else
          flash.now[:warning] = Param.get_param_value("adding_false")
          render :action => :new
        end
      end

    end
  
    def update
      @casein_page_title = Param.get_param_value "bac_luong_update_page_title"
      @bac_luong = BacLuong.find params[:id]
    
      if @bac_luong.update_attributes params[:bac_luong]
        flash[:notice] = Param.get_param_value("updating_success")
        redirect_to casein_bac_luong_path(@bac_luong)
      else
        flash.now[:warning] = Param.get_param_value("updating_false")
        render :action => :show
      end
    end
 
    def destroy
      @bac_luong = BacLuong.find params[:id]

      @bac_luong.destroy
      flash[:notice] = Param.get_param_value("deleting_success")
      redirect_to casein_bac_luongs_path
    end

    def import_from_excel
      @casein_page_title = Param.get_param_value("bac_luong_import_from_excel_page_title")
    end

    def parse_save_from_excel
      if params[:excel_file]
      file_path = params[:excel_file]
      file = XlsUploader.new
      file.store!(file_path)

      book = Spreadsheet.open "public/#{file.store_path}"

      sheet = book.worksheet 0  # first sheet in the spreadsheet file will be used

      @errors = Hash.new
      @counter = 0
      @commit = 0
      @wrong = 0
      sheet.each 1 do |row|
        @counter += 1
        
        ngach = Ngach.find_by_ma_ngach(row[0].to_s)
        bac_vk = row[3].to_i
        if ngach
          0.upto(29) do |i|
            p = BacLuong.new
            p.ngach_id = ngach.id
            p.bac = i + 1
            p.he_so_luong = row[i + 4].to_s
            flag = false
            if i >= bac_vk
              flag = true
            end
            p.vuot_khung = flag
          
            if p.valid?
              if !BacLuong.check_exists(p.ngach_id, p.bac)
                @commit += 1
                p.save
              else
                @wrong += 1
                @errors["#{@counter + 1}"] = "#{i.to_s} - #{row[i + 4].to_i}"
              end #end check
            else
              @wrong += 1
              @errors["#{@counter + 1}"] = "#{row[0].to_s} - #{row[1].to_i}"
            end #end valid?
          end #end upto
        end #end ngach  
      end
      book.io.close
      if @wrong == 0
        flash[:notice] = "#{Param.get_param_value "import_success"} | #{Param.get_param_value "commit"}: #{@commit}/#{@counter} | #{Param.get_param_value "wrong"}: #{@wrong}"
        file.remove!
        redirect_to casein_bac_luongs_path
      else
        flash[:notice] = "#{Param.get_param_value "import_success"} | #{Param.get_param_value "commit"}: #{@commit}/#{@counter} | #{Param.get_param_value "wrong"}: #{@wrong}"
        file.remove!
        render :action => 'show_result', :errors => @errors
      end

      else #if :excel_file is null
        flash[:warning] = Param.get_param_value ("let_choose_file_now")
        redirect_to import_from_excel_casein_bac_luongs_path
      end

    end

    def show_result
      @casein_page_title = Param.get_param_value("bac_luong_show_result_page_title")
      @errors = Hash.new
      @errors = params[:errors]
      respond_to do |format|
        format.html
        format.json {head :no_content}
      end
    end
  end
end
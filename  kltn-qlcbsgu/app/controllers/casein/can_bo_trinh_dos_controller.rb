# Scaffolding generated by Casein v.3.1.11

module Casein
  class CanBoTrinhDosController < Casein::CaseinController
  
    ## optional filters for defining usage according to Casein::Users access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = Param.get_param_value("can_bo_trinh_do_index_page_title")
      search_value = params["keyword"]
      if search_value
        @can_bo_trinh_dos = CanBoTrinhDo.search(search_value).paginate(:per_page => 10, :order => "can_bo_thong_tin_id", :page => params[:page])
        @can_bo_trinh_dos_xls = CanBoTrinhDo.search(search_value)
        if @can_bo_trinh_dos.count == 0
          flash.now[:warning] = Param.get_param_value("searching_has_no_result")
          @can_bo_trinh_dos = CanBoTrinhDo.paginate( :page => params[:page], :per_page => 10, :order => "can_bo_thong_tin_id")
          @can_bo_trinh_dos_xls = CanBoTrinhDo.all
        else
          flash.now[:notice] = "#{Param.get_param_value("number_searching_result")} #{@can_bo_trinh_dos.count}"
        end
      else
        @can_bo_trinh_dos = CanBoTrinhDo.paginate( :page => params[:page], :per_page => 10, :order => "can_bo_thong_tin_id")
        @can_bo_trinh_dos_xls = CanBoTrinhDo.all
      end
      respond_to do |format|
        format.html
        format.xls{
          can_bo_trinh_do = Spreadsheet::Workbook.new
          list = can_bo_trinh_do.create_worksheet :name => 'Danh sach trinh do can bo'
          list.row(0).concat %w{Ma_CB Ho_va_ten Trinh_do_Pho_thong Hoc_ham Hoc_vi Trinh_do_Chuyen_mon Chuyen_nganh Ly_luan_chinh_tri Quan_ly_Nha_nuoc Ngoai_ngu Trinh_do_ngoai_ngu Trinh_do_tin_hoc}
          @can_bo_trinh_dos_xls.each_with_index { |ct, i|
            if ct.hoc_ham
              hoc_ham = ct.hoc_ham.ten_hoc_ham
            end
            if ct.hoc_vi
              hoc_vi = ct.hoc_vi.ten_hoc_vi
            end
            if ct.chuyen_nganh
              chuyen_nganh = ct.chuyen_nganh.ten_chuyen_nganh
            end
            if ct.ly_luan_chinh_tri
              ly_luan_ct = ct.ly_luan_chinh_tri.trinh_do
            end
            if ct.quan_ly_nha_nuoc
              ql_nha_nuoc = ct.quan_ly_nha_nuoc.trinh_do
            end
            if ct.ngoai_ngu
              ngoai_ngu = ct.ngoai_ngu.ten_ngoai_ngu
            end

            list.row(i+1).push(ct.can_bo_thong_tin.ma_cb, ct.can_bo_thong_tin.ho_ten,ct.trinh_do_gd_pho_thong,hoc_ham,hoc_vi, ct.trinh_do_chuyen_mon.trinh_do, chuyen_nganh, ly_luan_ct, ql_nha_nuoc, ngoai_ngu,ct.trinh_do_ngoai_ngu, ct.trinh_do_tin_hoc)
          }

          header_format = Spreadsheet::Format.new :color => :green, :weight => :bold
          list.row(0).default_format = header_format
          #output to blob object
          blob = StringIO.new("")
          can_bo_trinh_do.write blob
          #respond with blob object as a file
          send_data blob.string, :type => :xls, :filename => "Danh_Sach_trinh_do_can_bo.xls"
        }
      end
    end
  
    def show
      @casein_page_title = Param.get_param_value("can_bo_trinh_do_show_page_title")
      @can_bo_trinh_do = CanBoTrinhDo.find params[:id]
    end
 
    def new
      @casein_page_title = Param.get_param_value("can_bo_trinh_do_new_page_title")
    	@can_bo_trinh_do = CanBoTrinhDo.new
    end

    def create
      @can_bo_trinh_do = CanBoTrinhDo.new params[:can_bo_trinh_do]
      if params[:can_bo_trinh_do][:ngoai_ngu] == ""
         params[:can_bo_trinh_do][:trinh_do_ngoai_ngu] = ""
      end
      if params[:can_bo_trinh_do][:trinh_do_chuyen_mon] == ""
        params[:can_bo_trinh_do][:chuyen_nganh] = ""
      end
      if @can_bo_trinh_do.save
        flash[:notice] = Param.get_param_value("adding_success")
        redirect_to casein_can_bo_trinh_dos_path
      else
        flash.now[:warning] = Param.get_param_value("adding_false")
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = Param.get_param_value("can_bo_trinh_do_update_page_title")
      if params[:can_bo_trinh_do][:ngoai_ngu] == ""
        params[:can_bo_trinh_do][:trinh_do_ngoai_ngu] = ""
      end

      @can_bo_trinh_do = CanBoTrinhDo.find params[:id]
    
      if @can_bo_trinh_do.update_attributes params[:can_bo_trinh_do]
        flash[:notice] = Param.get_param_value("updating_success")
        redirect_to casein_can_bo_trinh_dos_path
      else
        flash.now[:warning] = Param.get_param_value("updating_false")
        render :action => :show
      end
    end
 
    def destroy
      @can_bo_trinh_do = CanBoTrinhDo.find params[:id]

      @can_bo_trinh_do.destroy
      flash[:notice] = Param.get_param_value("deleting_success")
      redirect_to casein_can_bo_trinh_dos_path
    end


    def import_from_excel
      @casein_page_title = Param.get_param_value("can_bo_trinh_do_import_from_excel_page_title")
    end

    def parse_save_from_excel
      if params[:excel_file]
      file_path = params[:excel_file]
      file = XlsUploader.new
      file.store!(file_path)

      book = Spreadsheet.open "public/#{file.store_path}"

      sheet = book.worksheet 0  # first sheet in the spreadsheet file will be used

      @errors = Hash.new
      @counter = 0
      @commit = 0
      @wrong = 0
      sheet.each 1 do |row|
        @counter += 1
        p = CanBoTrinhDo.new
        can_bo = CanBoThongTin.find_by_ma_cb(row[0].to_i.to_s)
        if can_bo

          p.can_bo_thong_tin_id = can_bo.id
          p.trinh_do_gd_pho_thong = row[1].to_s

          hoc_ham = HocHam.find_by_ten_hoc_ham(row[2].to_s)
          if hoc_ham
            p.hoc_ham_id = hoc_ham.id
          end
          hoc_vi = HocVi.find_by_ten_hoc_vi(row[3].to_s)
          if hoc_vi
            p.hoc_vi_id = hoc_vi.id
          end
          trinh_do_chuyen_mon = TrinhDoChuyenMon.find_by_trinh_do(row[4].to_s)
          if trinh_do_chuyen_mon
            p.trinh_do_chuyen_mon_id = trinh_do_chuyen_mon.id
          end
          chuyen_nganh = ChuyenNganh.find_by_ten_chuyen_nganh(row[5].to_s)
          if chuyen_nganh
            p.chuyen_nganh_id = chuyen_nganh.id
          end
          ly_luan_chinh_tri = LyLuanChinhTri.find_by_trinh_do(row[6].to_i)
          if ly_luan_chinh_tri
            p.ly_luan_chinh_tri_id = ly_luan_chinh_tri.id
          end
          quan_ly_nha_nuoc = QuanLyNhaNuoc.find_by_trinh_do(row[7].to_i)
          if quan_ly_nha_nuoc
            p.quan_ly_nha_nuoc_id = quan_ly_nha_nuoc.id
          end
          ngoai_ngu = NgoaiNgu.find_by_ten_ngoai_ngu(row[8].to_i)
          if ngoai_ngu
            p.ngoai_ngu_id = ngoai_ngu.id
          end
          
          p.trinh_do_ngoai_ngu = row[9].to_s
          p.trinh_do_tin_hoc = row[10].to_s

        end #end if can_bo

        if p.valid?
          @commit += 1
          p.save
        else
          @errors["#{@counter + 1}"] = p.errors
          @wrong += 1
        end
      end
      book.io.close
      if @wrong == 0
        flash[:notice] = "#{Param.get_param_value "import_success"} | #{Param.get_param_value "commit"}: #{@commit}/#{@counter} | #{Param.get_param_value "wrong"}: #{@wrong}"
        file.remove!
        redirect_to casein_can_bo_trinh_dos_path
      else
        flash[:notice] = "#{Param.get_param_value "import_success"} | #{Param.get_param_value "commit"}: #{@commit}/#{@counter} | #{Param.get_param_value "wrong"}: #{@wrong}"
        file.remove!
        render :action => 'show_result', :errors => @errors
      end

      else #if :excel_file is null
        flash[:warning] = Param.get_param_value ("let_choose_file_now")
        redirect_to import_from_excel_casein_can_bo_thong_tins_path
      end

    end

    def show_result
      @casein_page_title = Param.get_param_value("can_bo_thong_tin_show_result_page_title")
      @errors = Hash.new
      @errors = params[:errors]
      respond_to do |format|
        format.html
        format.json {head :no_content}
      end
    end
  
  end
end
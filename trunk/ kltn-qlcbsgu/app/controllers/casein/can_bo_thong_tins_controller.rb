# Scaffolding generated by Casein v.3.1.11

module Casein
  class CanBoThongTinsController < Casein::CaseinController
  
    ## optional filters for defining usage according to Casein::Users access_levels
    before_filter :set_object, :only => [:show, :edit, :update, :destroy]
    before_filter :load_combo, :only => [:new, :edit, :create]

  
    def index
      search_value = params["keyword"]
      view = 10
      don_vi = 0
      page = params[:page] ||= 1

      if params["num_view"].to_s != ""
        #must be a number
        if params["num_view"].match(/^\d+$/)
          #must be greater than 0 
          if params["num_view"].to_i > 0
            #set view value for pagination
            view = params["num_view"].to_i
          end
        end
      end

      if params[:don_vi]
        don_vi = params[:don_vi].to_i if params[:don_vi].match(/^\d+$/)
      end

      order = ""
      if params["order_by"].to_s != ""
        order = params["order_by"]
        #ignore the invalid values for order queries
        if order.split(":").last != "desc" && order.split(":").count > 1
          order = ""
        else
          #convert to correct format
          #param values has been submited include colon symbol
          #e.g: order by query desc
          order = order.gsub(':', ' ')
        end
      end

      #set conditions for paginate to filter records, it's base on don_vi parameter
      paginate_conditions = ""
      paginate_conditions = ['don_vi_id = ?', don_vi] if don_vi != 0

      if search_value != nil
        @can_bo_thong_tins = CanBoThongTin.search(search_value, don_vi).paginate(:per_page => view, :page => page, :conditions => paginate_conditions, :order => order)
        @can_bo_thong_tins_xls = CanBoThongTin.search(search_value, don_vi)
        if @can_bo_thong_tins.count == 0
          flash.now[:warning] = Param.get_param_value("searching_has_no_result")
          @can_bo_thong_tins = CanBoThongTin.paginate :page => page, :per_page => view, :conditions => paginate_conditions, :order => order
          @can_bo_thong_tins_xls = CanBoThongTin.all
        else
          flash.now[:notice] = "#{Param.get_param_value("number_searching_result")} #{@can_bo_thong_tins.count}"
        end
      else
        @can_bo_thong_tins = CanBoThongTin.paginate :page => page, :conditions => paginate_conditions, :per_page => view, :order => order
        @can_bo_thong_tins_xls = CanBoThongTin.all
      end
      
      respond_to do |format|
        format.html
        format.xls {
          can_bo = Spreadsheet::Workbook.new
          list = can_bo.create_worksheet :name => 'Danh sach can bo'
          list.row(0).concat %w{Ma_CB Ho_va_Ten Ten_goi_khac Gioi_tinh Ngay_Sinh Noi_sinh Que_quan Dan_toc Ton_giao Noi_dang_ky_HKTT Noi_o_hien_nay So_BNXH So_CMND Ngay_cap_CMND}
          @can_bo_thong_tins_xls.each_with_index { |canbo, i|
            if canbo.gioi_tinh
              gioi_tinh = 'Nam'
            else
              gioi_tinh = Param.get_param_value 'Nu'
            end
            list.row(i+1).push canbo.ma_cb, canbo.ho_ten, canbo.ten_goi_khac, gioi_tinh, canbo.ngay_sinh, canbo.noi_sinh, canbo.que_quan, canbo.dan_toc, canbo.ton_giao, canbo.noi_dang_ky_ho_khau_thuong_tru, canbo.noi_o_hien_nay, canbo.so_BHXH, canbo.so_cmnd, canbo.ngay_cap_cmnd
          }
          header_format = Spreadsheet::Format.new :color => :green, :weight => :bold
          list.row(0).default_format = header_format
          #output to blob object
          blob = StringIO.new("")
          can_bo.write blob
          #respond with blob object as a file
          send_data blob.string, :type => :xls, :filename => "Danh_sach_can_bo_vien_chuc_#{Time.now.to_i.to_s}.xls"
        }
      end
    end

    def edit
    end

    def show
      respond_to do |format|
        format.html
        format.json {render :json => @can_bo_thong_tin}
        format.xls{
          book = Spreadsheet::Workbook.new
          none_format = Spreadsheet::Format.new
          sheet = book.create_worksheet :name => "So yeu ly lich"
          sheet.row(0)[1] = "#{Param.get_param_value("so_yeu_ly_lich")}"

          i = 2
          #write can_bo_thong_tin info
          @can_bo_thong_tin.attributes.each do |attr_name, attr_value|

            #format gioi_tinh to text value
            if attr_name == 'gioi_tinh'
              if attr_value
                attr_value = "Nam"
              else
                attr_value = ""
              end
            end

            if attr_name != 'is_deleted' && attr_name != 'tep_tin_dinh_kem' && attr_name != 'id' && attr_name != 'bac_luong_id' && attr_name != 'hinh_anh' && attr_name != 'created_at' && attr_name != 'updated_at'
              i = i + 1
              sheet.row(i)[1] = "#{Param.get_param_value"#{attr_name}"}"
              sheet.row(i)[2] = attr_value
            end

            if attr_name == 'bac_luong_id'
              if attr_value
                bac_luong = BacLuong.find(attr_value)
                if bac_luong
                  i = i + 1
                  sheet.row(i)[1] = "#{Param.get_param_value"ngach"}"
                  sheet.row(i)[2] = bac_luong.ngach.ten_ngach
                  i = i + 1
                  sheet.row(i)[1] = "#{Param.get_param_value"ma_ngach"}"
                  sheet.row(i)[2] = bac_luong.ngach.ma_ngach
                  i = i + 1
                  sheet.row(i)[1] = "#{Param.get_param_value"bac_luong"}"
                  sheet.row(i)[2] = bac_luong.bac
                  i = i + 1
                  sheet.row(i)[1] = "#{Param.get_param_value"he_so_luong"}"
                  if bac_luong.vuot_khung
                    sheet.row(i)[2] = "VK #{bac_luong.he_so_luong}%"
                  else
                    sheet.row(i)[2] = bac_luong.he_so_luong
                  end


                end
              end

            end


          end  #end can_bo_thong_tin loop function

          if @can_bo_thong_tin.can_bo_cong_tac
            i = i + 1
            sheet.row(i)[1] = "#{Param.get_param_value"don_vi_tuyen_dung"}"
            if  @can_bo_thong_tin.can_bo_cong_tac.don_vi_id
              sheet.row(i)[2] = @can_bo_thong_tin.can_bo_cong_tac.don_vi.ten_don_vi
            end
            i = i + 1
            sheet.row(i)[1] = "#{Param.get_param_value"nghe_nghiep_truoc_tuyen_dung"}"
            sheet.row(i)[2] =  @can_bo_thong_tin.can_bo_cong_tac.nghe_nghiep_truoc_tuyen_dung
            i = i + 1
            sheet.row(i)[1] = "#{Param.get_param_value"cong_viec"}"
            sheet.row(i)[2] = @can_bo_thong_tin.can_bo_cong_tac.cong_viec_chinh_duoc_giao
            i = i + 1
            sheet.row(i)[1] = "#{Param.get_param_value"so_truong"}"
            sheet.row(i)[2] = @can_bo_thong_tin.can_bo_cong_tac.so_truong_cong_tac
            i = i + 1
            sheet.row(i)[1] = "#{Param.get_param_value"ngay_bat_dau_lam_viec"}"
            if @can_bo_thong_tin.can_bo_cong_tac.ngay_bat_dau_lam_viec
              sheet.row(i)[2] = @can_bo_thong_tin.can_bo_cong_tac.ngay_bat_dau_lam_viec.strftime("%d/%m/%Y")
            end

          end
          if @can_bo_thong_tin.can_bo_trinh_do
            i = i + 1
            #write can_bo_thong_tin info
            sheet.row(i)[1] = Param.get_param_value("trinh_do_pho_thong")
            sheet.row(i)[2] = @can_bo_thong_tin.can_bo_trinh_do.trinh_do_gd_pho_thong
            i = i + 1
            if  @can_bo_thong_tin.can_bo_trinh_do.hoc_ham_id
              sheet.row(i)[1] = Param.get_param_value("hoc_ham")
              sheet.row(i)[2] = @can_bo_thong_tin.can_bo_trinh_do.hoc_ham.ten_hoc_ham
              i = i + 1
            end

            if  @can_bo_thong_tin.can_bo_trinh_do.hoc_vi_id
              sheet.row(i)[1] = Param.get_param_value("hoc_vi")
              sheet.row(i)[2] = @can_bo_thong_tin.can_bo_trinh_do.hoc_vi.ten_hoc_vi
              i = i + 1
            end

            if  @can_bo_thong_tin.can_bo_trinh_do.chuyen_nganh_id
              sheet.row(i)[1] = Param.get_param_value("trinh_do_chuyen_mon")
              sheet.row(i)[2] = "#{@can_bo_thong_tin.can_bo_trinh_do.trinh_do_chuyen_mon.trinh_do} #{@can_bo_trinh_do.chuyen_nganh.ten_chuyen_nganh}"
              i = i + 1
            end

            if  @can_bo_thong_tin.can_bo_trinh_do.ly_luan_chinh_tri_id
              sheet.row(i)[1] = Param.get_param_value("ly_luan_chinh_tri")
              sheet.row(i)[2] = @can_bo_thong_tin.can_bo_trinh_do.ly_luan_chinh_tri.trinh_do
              i = i + 1
            end

            if  @can_bo_thong_tin.can_bo_trinh_do.quan_ly_nha_nuoc_id
              sheet.row(i)[1] = Param.get_param_value("quan_ly_nha_nuoc")
              sheet.row(i)[2] = @can_bo_thong_tin.can_bo_trinh_do.quan_ly_nha_nuoc.trinh_do
              i = i + 1
            end

            if  @can_bo_thong_tin.can_bo_trinh_do.ngoai_ngu_id
              sheet.row(i)[1] = Param.get_param_value("ngoai_ngu")
              sheet.row(i)[2] = "#{@can_bo_thong_tin.can_bo_trinh_do.ngoai_ngu.ten_ngoai_ngu} #{@can_bo_trinh_do.trinh_do_ngoai_ngu}"
              i = i + 1
            end

            if  @can_bo_thong_tin.can_bo_trinh_do.trinh_do_tin_hoc
              sheet.row(i)[1] = Param.get_param_value("tin_hoc")
              sheet.row(i)[2] = "#{@can_bo_thong_tin.can_bo_trinh_do.trinh_do_tin_hoc}"
              i = i + 1
            end

          end



          #format display layout
          sheet.merge_cells(0, 1, 1, 2)
          header_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :size => 16, :align => :center, :vertical_align => :center, :horizontal_align => :center
          sheet.row(0).default_format = header_format
          sheet.column(1).default_format = Spreadsheet::Format.new :weight => :bold, :align => :left, :text_wrap => true, :vertical_align => :center
          sheet.column(1).width = 20
          sheet.column(2).default_format = Spreadsheet::Format.new :align => :left, :vertical_align => :center
          sheet.column(2).width = 50

          sheet_second = book.create_worksheet :name => "Than nhan"
          #write than_nhan info
          i = 2
          sheet_second.row(0)[1] = "#{Param.get_param_value("thong_tin_than_nhan")}"
          sheet_second.merge_cells(0, 1, 0, 4)
          sheet_second.row(0).default_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :size => 12, :align => :center
          sheet_second.row(i)[1] = "#{Param.get_param_value("moi_quan_he")}"
          sheet_second.row(i)[2] = "#{Param.get_param_value("ho_ten")}"
          sheet_second.row(i)[3] = "#{Param.get_param_value("nam_sinh")}"
          sheet_second.row(i)[4] = "#{Param.get_param_value("nghe_nghiep")}"
          sheet_second.row(i).default_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :top, :text_wrap => true
          if @can_bo_thong_tin.than_nhans.count > 0
            @can_bo_thong_tin.than_nhans.each do |than_nhan|
              i = i + 1
              sheet_second.row(i)[1] = than_nhan.quan_he_gia_dinh.ten_quan_he
              sheet_second.row(i)[2] = than_nhan.ho_ten
              sheet_second.row(i)[3] = than_nhan.nam_sinh
              sheet_second.row(i)[4] = than_nhan.nghe_nghiep
              sheet_second.row(i).default_format =  Spreadsheet::Format.new :align => :top, :text_wrap => true
            end
            sheet_second.column(1).width = 15
            sheet_second.column(2).width = 20
            sheet_second.column(2).width = 15
            sheet_second.column(4).width = 30
          end

          sheet_third = book.create_worksheet :name => "Qua trinh cong tac"
          #write than_nhan info
          i = 2
          sheet_third.row(0)[1] = "#{Param.get_param_value("qua_trinh_cong_tac")}"
          sheet_third.merge_cells(0, 1, 0, 4)
          sheet_third.row(0).default_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :size => 12, :align => :center
          sheet_third.row(i)[1] = "#{Param.get_param_value("don_vi")}"
          sheet_third.row(i)[2] = "#{Param.get_param_value("chuc_vu")}"
          sheet_third.row(i)[3] = "#{Param.get_param_value("thoi_gian_bat_dau")}"
          sheet_third.row(i)[4] = "#{Param.get_param_value("thoi_gian_chuyen_cong_tac")}"
          sheet_third.row(i).default_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :top, :text_wrap => true
          if @can_bo_thong_tin.qua_trinh_cong_tacs.count > 0
            @can_bo_thong_tin.qua_trinh_cong_tacs.each do |qua_trinh_cong_tac|
              i = i + 1
              if qua_trinh_cong_tac.don_vi_id
                sheet_third.row(i)[1] = qua_trinh_cong_tac.don_vi.ten_don_vi
              end
              if qua_trinh_cong_tac.chuc_vu_id
                sheet_third.row(i)[2] = qua_trinh_cong_tac.chuc_vu.ten_chuc_vu
              end
              if qua_trinh_cong_tac.thoi_gian_bat_dau
                sheet_third.row(i)[3] = qua_trinh_cong_tac.thoi_gian_bat_dau.strftime("%d/%m/%Y")
              end
              if qua_trinh_cong_tac.thoi_gian_ket_thuc
                sheet_third.row(i)[4] = qua_trinh_cong_tac.thoi_gian_ket_thuc.strftime("%d/%m/%Y")
              end
              sheet_third.row(i).default_format =  Spreadsheet::Format.new :align => :top, :text_wrap => true
            end
            sheet_third.column(1).width = 20
            sheet_third.column(2).width = 15
            sheet_third.column(2).width = 15
            sheet_third.column(4).width = 15
          end

          sheet_fourth = book.create_worksheet :name => "Lich su thay doi bac luong"
          #write than_nhan info
          i = 2
          sheet_fourth.row(0)[1] = "#{Param.get_param_value("lich_su_bac_luong")}"
          sheet_fourth.merge_cells(0, 1, 0, 4)
          sheet_fourth.row(0).default_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :size => 12, :align => :center
          sheet_fourth.row(i)[1] = "#{Param.get_param_value("ngach")}"
          sheet_fourth.row(i)[2] = "#{Param.get_param_value("bac")}"
          sheet_fourth.row(i)[3] = "#{Param.get_param_value("ngay_thay_doi_bac")}"
          sheet_fourth.row(i)[4] = "#{Param.get_param_value("ghi_chu")}"
          sheet_fourth.row(i).default_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :top, :text_wrap => true
          if @can_bo_thong_tin.lich_su_bac_luongs.count > 0
            @can_bo_thong_tin.lich_su_bac_luongs.each do |lich_su_bac_luong|
              i = i + 1
              if lich_su_bac_luong.bac_luong_id
                if lich_su_bac_luong.bac_luong.ngach_id
                  sheet_fourth.row(i)[1] = lich_su_bac_luong.bac_luong.ngach.ten_ngach
                end
                sheet_fourth.row(i)[2] = lich_su_bac_luong.bac_luong.bac
              end
              if lich_su_bac_luong.ngay_thay_doi_bac
                sheet_fourth.row(i)[3] = lich_su_bac_luong.ngay_thay_doi_bac.strftime("%d/%m/%Y")
              end
              sheet_fourth.row(i)[4] = lich_su_bac_luong.ghi_chu
              sheet_fourth.row(i).default_format =  Spreadsheet::Format.new :align => :top, :text_wrap => true
            end
            sheet_fourth.column(1).width = 20
            sheet_fourth.column(2).width = 10
            sheet_fourth.column(2).width = 20
            sheet_fourth.column(4).width = 20
          end

          #output to blob object
          blob = StringIO.new("")
          book.write blob
          #respond with blob object as a file
          send_data blob.string, :type => :xls, :filename => "so_yeu_ly_lich_can_bo_#{@can_bo_thong_tin.ma_cb}_#{@can_bo_thong_tin.ho_ten.to_s.chars.select(&:ascii_only?).join.gsub!(' ', '_')}.xls"
        }
      end

    end
 
    def new
    	@can_bo_thong_tin = CanBoThongTin.new
    end

    def create
      @can_bo_thong_tin = CanBoThongTin.new params[:can_bo_thong_tin]
      #image uploader
      my_image = params[:can_bo_thong_tin][:hinh_anh]
      image_uploader = ImageUploader.new
      image_uploader.store!(my_image)
      image_uploader.retrieve_from_store!('my_image.png')
      #file uploader
      my_file = params[:can_bo_thong_tin][:tep_tin_dinh_kem]
      file_uploader = FileUploader.new
      file_uploader.store!(my_file)
      file_uploader.retrieve_from_store!('my_file.doc')

      #@can_bo_thong_tin.update_bac_luong_id params[:can_bo_thong_tin][:ngach_id], params[:can_bo_thong_tin][:bac]
      #@can_bo_thong_tin.update_quyet_dinh_id params[:can_bo_thong_tin][:so_quyet_dinh]
      @can_bo_thong_tin.quyet_dinh_id = params[:can_bo_thong_tin][:ngach_id]
      if @can_bo_thong_tin.save
        flash[:notice] = Param.get_param_value("adding_success")
        redirect_to casein_can_bo_thong_tins_path
      else
        flash.now[:warning] = Param.get_param_value("adding_false")
        render :action => :new
      end
    end
  
    def update

      #image uploader
      my_image = params[:can_bo_thong_tin][:hinh_anh]
      image_uploader = ImageUploader.new
      image_uploader.store!(my_image)
      #file uploader
      my_file = params[:can_bo_thong_tin][:tep_tin_dinh_kem]
      file_uploader = FileUploader.new
      file_uploader.store!(my_file)      

      if @can_bo_thong_tin.update_attributes params[:can_bo_thong_tin]

        flash[:notice] = Param.get_param_value("updating_success")
        redirect_to casein_can_bo_thong_tin_path(@can_bo_thong_tin)
      else
        flash.now[:warning] = Param.get_param_value("updating_false")
        render :action => :edit
      end
    end
 
    def destroy

      @can_bo_thong_tin.update_attributes(:is_deleted => true)
      flash[:notice] = Param.get_param_value("deleting_success")
      redirect_to casein_can_bo_thong_tins_path
    end

    def custom_export_data
    end

    def get_and_export_to_excel
      @can_bo_thong_tins = CanBoThongTin.all
      
      respond_to do |format|
        format.html
        format.xls {
          can_bo = Spreadsheet::Workbook.new
          list = can_bo.create_worksheet :name => 'Danh sach can bo'
		      last = 4    
          @can_bo_thong_tins.each_with_index {|cb, index|
            i = 1
            index = index + 3
            list.row(2)[i] = "Ma can bo"
            list.row(index)[i] = cb.ma_cb

            if params['ho_ten'].to_s != ""
                i = i + 1
                list.row(2)[i] = "Ho va Ten"
                list.row(index)[i] = cb.ho_ten
             
            end
            if params['ten_goi_khac'].to_s != ""
              i = i + 1
              list.row(2)[i] = "Ten goi khac"
              list.row(index)[i] = cb.ten_goi_khac
            end
            if params["ngay_sinh"].to_s != ""
              i = i + 1
              list.row(2)[i] = "Ngay sinh"
              list.row(index)[i] = cb.ngay_sinh
            end
            if params["gioi_tinh"].to_s != ""
              i = i + 1
              list.row(2)[i] = "Gioi tinh"
              if cb.gioi_tinh
                list.row(index)[i] = "Nam"
              else
                list.row(index)[i] = ""
              end
            end
            if params["noi_sinh"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Noi sinh"
              list.row(index)[i] = cb.noi_sinh
            end
            if params["que_quan"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Que quan"
              list.row(index)[i] = cb.que_quan
            end
            if params["dan_toc"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Dan toc"
              list.row(index)[i] = cb.dan_toc
            end
            if params["ton_giao"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Ton giao"
              list.row(index)[i] = cb.ton_giao
            end
            if params["noi_o_hien_nay"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Noi o hien nay"
              list.row(index)[i] = cb.noi_o_hien_nay
            end
            if params["noi_dang_ky_ho_khau_thuong_tru"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Noi dang ky ho khau thuong tru"
              list.row(index)[i] = cb.noi_dang_ky_ho_khau_thuong_tru
            end
            if params["so_cmnd"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "So CMND"
              list.row(index)[i] = cb.so_cmnd
            end
            if params["ngay_cap_cmnd"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Ngay cap CMND"
              list.row(index)[i] = cb.ngay_cap_cmnd
            end
            if params["so_BHXH"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "So so BHXH"
              list.row(index)[i] = cb.so_BHXH 
            end
            if params["ngach"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Ngach cong chuc"
              if cb.bac_luong_id
                bac_luong = BacLuong.find(cb.bac_luong_id)
                if bac_luong
                  if Ngach.find(bac_luong.ngach_id)
                    list.row(index)[i] = bac_luong.ngach.ten_ngach
                  end
                end
              end 
            end
            if params["ma_ngach"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Ma ngach"
              if cb.bac_luong_id
                bac_luong = BacLuong.find(cb.bac_luong_id)
                if bac_luong
                  if Ngach.find(bac_luong.ngach_id)
                    list.row(index)[i] = bac_luong.ngach.ma_ngach
                  end
                end
              end 
            end
            if params["bac_luong"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Bac luong"
              if cb.bac_luong_id
                bac_luong = BacLuong.find(cb.bac_luong_id)
                if bac_luong
                  list.row(index)[i] = bac_luong.bac
                end
              end
            end
            if params["he_so"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "He so luong"
              if cb.bac_luong_id
                bac_luong = BacLuong.find(cb.bac_luong_id)
                if bac_luong
                  list.row(index)[i] = bac_luong.he_so_luong
                end
              end
            end
            if params["don_vi"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Don vi tuyen dung"
              can_bo_cong_tac = CanBoCongTac.find_by_can_bo_thong_tin_id(cb.id)
              if can_bo_cong_tac
                if can_bo_cong_tac.don_vi_id
                  don_vi = DonVi.find(can_bo_cong_tac.don_vi_id)
                  if don_vi
                    list.row(index)[i] = can_bo_cong_tac.don_vi.ten_don_vi
                  end
                end
              end
            end
            if params["nghe_nghiep"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Nghe nghiep truoc tuyen dung"
              can_bo_cong_tac = CanBoCongTac.find_by_can_bo_thong_tin_id(cb.id)
              if can_bo_cong_tac
                list.row(index)[i] = can_bo_cong_tac.nghe_nghiep_truoc_tuyen_dung
              end
            end
            if params["cong_viec"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Cong viec chinh duoc giao"
              can_bo_cong_tac = CanBoCongTac.find_by_can_bo_thong_tin_id(cb.id)
              if can_bo_cong_tac
                cv = CongViec.find(can_bo_cong_tac.cong_viec_id)
                if cv
                  list.row(index)[i] = cv.ten_cong_viec
                end
              end
            end
            if params["so_truong_cong_tac"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "So truong cong tac"
              can_bo_cong_tac = CanBoCongTac.find_by_can_bo_thong_tin_id(cb.id)
              if can_bo_cong_tac
                list.row(index)[i] = can_bo_cong_tac.cong_viec_chinh_duoc_giao
              end
            end
            if params["ngay_bat_dau_lam_viec"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Ngay bat dau lam viec"
              can_bo_cong_tac = CanBoCongTac.find_by_can_bo_thong_tin_id(cb.id)
              if can_bo_cong_tac
                list.row(index)[i] = can_bo_cong_tac.ngay_bat_dau_lam_viec
              end
            end
            if params["trinh_do_pho_thong"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Trinh do giao duc pho thong"
              can_bo_trinh_do = CanBoTrinhDo.find_by_can_bo_thong_tin_id(cb.id)
              if can_bo_trinh_do
                list.row(index)[i] = can_bo_trinh_do.trinh_do_gd_pho_thong
              end
            end
            if params["trinh_do_chuyen_mon"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Trinh do chuyen mon cao nhat"
              can_bo_trinh_do = CanBoTrinhDo.find_by_can_bo_thong_tin_id(cb.id)
              if can_bo_trinh_do
                if can_bo_trinh_do.trinh_do_chuyen_mon_id
                  trinh_do_chuyen_mon = TrinhDoChuyenMon.find(can_bo_trinh_do.trinh_do_chuyen_mon_id)
                  if trinh_do_chuyen_mon
                    list.row(index)[i] = can_bo_trinh_do.trinh_do_chuyen_mon.trinh_do
                  end
                end
              end
            end
            if params["hoc_ham"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Hoc ham"
              can_bo_trinh_do = CanBoTrinhDo.find_by_can_bo_thong_tin_id(cb.id)
              if can_bo_trinh_do
                if can_bo_trinh_do.hoc_ham_id
                  hoc_ham = HocHam.find(can_bo_trinh_do.hoc_ham_id)
                  if hoc_ham
                    list.row(index)[i] = hoc_ham.ten_hoc_ham
                  end
                end
              end
            end
            if params["hoc_vi"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Hoc vi"
              can_bo_trinh_do = CanBoTrinhDo.find_by_can_bo_thong_tin_id(cb.id)
              if can_bo_trinh_do
                if can_bo_trinh_do.hoc_vi_id
                  hoc_vi = HocVi.find(can_bo_trinh_do.hoc_vi_id)
                  if hoc_vi
                    list.row(index)[i] = hoc_vi.ten_hoc_vi
                  end
                end
              end
            end
            if params["ly_luan_chinh_tri"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Trinh do ly luan chinh tri"
              can_bo_trinh_do = CanBoTrinhDo.find_by_can_bo_thong_tin_id(cb.id)
              if can_bo_trinh_do
                if can_bo_trinh_do.ly_luan_chinh_tri_id
                  ly_luan_chinh_tri = LyLuanChinhTri.find(can_bo_trinh_do.ly_luan_chinh_tri_id)
                  if ly_luan_chinh_tri
                    list.row(index)[i] = ly_luan_chinh_tri.trinh_do
                  end
                end
              end
            end
            if params["quan_ly_nha_nuoc"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Trinh do quan ly nha nuoc"
              can_bo_trinh_do = CanBoTrinhDo.find_by_can_bo_thong_tin_id(cb.id)
              if can_bo_trinh_do
                if can_bo_trinh_do.quan_ly_nha_nuoc_id
                  quan_ly_nha_nuoc = QuanLyNhaNuoc.find(can_bo_trinh_do.quan_ly_nha_nuoc_id)
                  if quan_ly_nha_nuoc
                    list.row(index)[i] = quan_ly_nha_nuoc.trinh_do
                  end
                end
              end
            end
            if params["ngoai_ngu"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Ngoai ngu"
              can_bo_trinh_do = CanBoTrinhDo.find_by_can_bo_thong_tin_id(cb.id)
              if can_bo_trinh_do
                if can_bo_trinh_do.ngoai_ngu_id
                  ngoai_ngu = NgoaiNgu.find(can_bo_trinh_do.ngoai_ngu_id)
                  if ngoai_ngu
                    list.row(index)[i] = "#{ngoai_ngu.ten_ngoai_ngu} #{can_bo_trinh_do.trinh_do_ngoai_ngu}"
                  end
                end
              end
            end
            if params["tin_hoc"].to_s == "true"
              i = i + 1
              list.row(2)[i] = "Tin hoc"
              can_bo_trinh_do = CanBoTrinhDo.find_by_can_bo_thong_tin_id(cb.id)
              if can_bo_trinh_do
                list.row(index)[i] = can_bo_trinh_do.trinh_do_tin_hoc
              end
            end
			     last = i
          }
          list.row(0)[0] = "DANH SACH CAN BO CONG CHUC"
          list.merge_cells(0, 0, 1, last)
          list.row(0).default_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :center, :size => 13
		      list.row(2).default_format = Spreadsheet::Format.new :color => :green, :weight => :bold
			
          #format columns width
          1.upto(last) do |index|
            list.column(index).width = 20
          end
		  list.row(2)[0] = "STT"
		  list.column(0).width = 5
		  1.upto(@can_bo_thong_tins.count) do |stt|
			list.row(stt + 2)[0] = stt
		  end

          #output to blob object
          blob = StringIO.new("")
          can_bo.write blob
          #respond with blob object as a file
          send_data blob.string, :type => :xls, :filename => "Danh_sach_can_bo_#{Time.now.to_i.to_s}.xls"
        }
      end
      
    end

    def import_from_excel
    end

    def parse_save_from_excel
      if params[:excel_file]
      file_path = params[:excel_file]
      file = XlsUploader.new
      file.store!(file_path)

      book = Spreadsheet.open "public/#{file.store_path}"

      sheet = book.worksheet 0  # first sheet in the spreadsheet file will be used

      columns = []
      if params[:custom]
        columns = [params[:ma_cb].to_i - 1, params[:ho_ten].to_i - 1, params[:ten_goi_khac].to_i - 1, params[:gioi_tinh].to_i - 1, params[:ngay_sinh].to_i - 1, params[:noi_sinh].to_i - 1, params[:que_quan].to_i - 1, params[:dan_toc].to_i - 1, params[:ton_giao].to_i - 1, params[:noi_dang_ky_ho_khau_thuong_tru].to_i - 1, params[:noi_o_hien_nay].to_i - 1, params[:so_BHXH].to_i - 1, params[:so_cmnd].to_i - 1, params[:ngay_cap_cmnd].to_i] - 1
      else
        columns = Array(0..13)
      end
      @errors = Hash.new
      @counter = 0
      @commit = 0
      @wrong = 0
      sheet.each 1 do |row|
        @counter += 1
        p = CanBoThongTin.new
        p.ma_cb = row[columns[0]].to_i
        p.ho_ten = row[columns[1]].to_s
        p.ten_goi_khac = row[columns[2]].to_s
        gioi_tinh = row[columns[3]].to_s.chars.select(&:ascii_only?).join #remove unicode and lowercase
        if gioi_tinh.upcase == 'NAM'
          p.gioi_tinh = true
        else
          p.gioi_tinh = false
        end
        p.ngay_sinh = row[columns[4]].to_date
        p.noi_sinh = row[columns[5]].to_s
        p.que_quan = row[columns[6]].to_s
        p.dan_toc = row[columns[7]].to_s
        p.ton_giao = row[columns[8]].to_s
        p.noi_dang_ky_ho_khau_thuong_tru = row[columns[9]].to_s
        p.noi_o_hien_nay = row[columns[10]].to_s
        p.so_BHXH = row[columns[11]].to_s
        p.so_cmnd = row[columns[12]].to_s
        p.ngay_cap_cmnd = row[columns[13]].to_date
        if params["allow_null_ten_goi_khac"].to_s !="1"
          p.ten_goi_khac = ""
        end
        if params["allow_null_so_BHXH"].to_s !="1"
          p.so_BHXH = ""
        end
        if params["allow_null_ngay_cap_cmnd"].to_s !="1"
          p.ngay_cap_cmnd = Time.now
        end

        if p.valid?
          @commit += 1
          p.save
        else
          @errors["#{@counter + 1}"] = "#{p.ma_cb} - #{p.ho_ten}"
          @wrong += 1
        end
      end
      book.io.close
      if @wrong == 0
        flash[:notice] = "#{Param.get_param_value "import_success"} | #{Param.get_param_value "commit"}: #{@commit}/#{@counter} | #{Param.get_param_value "wrong"}: #{@wrong}"
        file.remove!
        redirect_to casein_can_bo_thong_tins_path
      else
        flash[:notice] = "#{Param.get_param_value "import_success"} | #{Param.get_param_value "commit"}: #{@commit}/#{@counter} | #{Param.get_param_value "wrong"}: #{@wrong}"
        file.remove!
        render :action => 'show_result', :errors => @errors
      end

      else #if :excel_file is null
        flash[:warning] = Param.get_param_value ("let_choose_file_now")
        redirect_to import_from_excel_casein_can_bo_thong_tins_path
      end

    end

    def advance_search
      search_advance_req = params["search_advance_req"]
      if search_advance_req != nil and search_advance_req.length>0
        @can_bo_thong_tin = CanBoThongTin.new params[:can_bo_thong_tin]
        options = {}
        #gioi_tinh to hash
        if params[:can_bo_thong_tin][:search_by_gioi_tinh].to_s != "all"
          options = options.merge(:gioi_tinh =>  params[:can_bo_thong_tin][:search_by_gioi_tinh].to_s)
        end
         #each attribute to hash, except gioi_tinh, ngay_sinh,
         @can_bo_thong_tin.attributes.each do |attr_name, attr_value|
             if attr_value.to_s.length>0 && attr_name !='gioi_tinh' && attr_name !='is_deleted'
                options = options.merge(attr_name =>attr_value)
             end
         end
        if @can_bo_thong_tin.don_vi_id.to_s.length>0
          options = options.merge(:don_vi_id =>  @can_bo_thong_tin.don_vi_id)
        end
        if @can_bo_thong_tin.trinh_do_chuyen_mon_id.to_s.length>0
          options = options.merge(:trinh_do_chuyen_mon_id =>  @can_bo_thong_tin.trinh_do_chuyen_mon_id)
        end
        if @can_bo_thong_tin.chuc_vu_code.to_s.length>0
          options = options.merge(:chuc_vu_code =>  @can_bo_thong_tin.chuc_vu_code)
        end
        if @can_bo_thong_tin.ngach_id.to_s.length>0
          options = options.merge(:ngach_id =>  @can_bo_thong_tin.ngach_id)
        end


        # set sql excute query is_deleted = false (only get employee not deleted)
        options = options.merge(:is_deleted =>  false)

        @can_bo_thong_tins = CanBoThongTin.search_advance(options).paginate(:per_page => 10, :page => params[:page])
        @has_result = true

        if @can_bo_thong_tins.count == 0
          flash.now[:warning] = Param.get_param_value("searching_has_no_result")
          @has_result = false
        else
          flash.now[:notice] = "#{Param.get_param_value("number_searching_result")} #{@can_bo_thong_tins.count}"
        end
      else
        @can_bo_thong_tin = CanBoThongTin.new
      end
    end


    def statistic
      statistic_req = params["statistic_req"]

      hash_params = {
                      :don_vi_id => params["don_vi_id"] || [], 
                      :hoc_ham_id => params["hoc_ham_id"] || [],
                      :hoc_vi_id => params["hoc_vi_id"] || [],
                      :ngach_id => params["ngach_id"] || [],
                      :gioi_tinh => params["gioi_tinh"],
                      :dan_toc => params["dan_toc"],
                      :nam_sinh_tu => params["nam_sinh_tu"],
                      :nam_sinh_den => params["nam_sinh_den"],
                      :dang_vien => params["dang_vien"],
                      :nam_cong_tac => params["nam_cong_tac"],
                      :gia_dinh_chinh_sach => params["gia_dinh_chinh_sach"]
                    }
      if statistic_req
        @can_bo_thong_tins = CanBoThongTin.statistic(hash_params)
        
        if @can_bo_thong_tins.count>0
          @can_bo_thong_tins = @can_bo_thong_tins.paginate :page=>params[:page], :order => "don_vi_id"
          @has_result = true
          @counter = @can_bo_thong_tins.count
          flash.now[:notice] = "#{Param.get_param_value("number_searching_result")} #{@can_bo_thong_tins.count}"
        else
          flash.now[:warning] = Param.get_param_value("searching_has_no_result")
          @has_result = false
        end
      end
    end

    def statistic_total
      @loai_don_vis = {}
      @don_vi_ids = []
      @don_vis = {}
      @trinh_do_chuyen_mon_ids = []
      @trinh_do_chuyen_mons = []
      @loai_lao_dong_ids = []
      @loai_lao_dongs = []
      @cong_viec_ids = []
      @cong_viecs = []
      @range_of_age = ""
      @hash = {}
      @hash_dv_age = {}
      @hash_dv_lld = {}
      @hash_dv_tdcm = {}
      @hash_dv_cv = {}
      @params = []

      LoaiDonVi.all.each do |ldv|
        if params["ldv_#{ldv.id}"]
          @loai_don_vis.merge! ldv.id => ldv.ten_loai_don_vi
          @params.push "ldv_#{ldv.id}=#{params["ldv_#{ldv.id}"]}"         
        end
      end

      @loai_don_vis.each do |e|
        list = []
        DonVi.find_all_by_loai_don_vi_id(e[0]).each do |dv|
          if params["dv_#{dv.id}"]
            @don_vi_ids.push dv.id
            list.push [dv.id, dv.ten_don_vi]
            @params.push "dv_#{dv.id}=#{params["dv_#{dv.id}"]}"
          end
        end
        @don_vis.merge! e => list
      end

      if params["tdcm_chk"]
        @params.push "tdcm_chk=#{params["tdcm_chk"]}"
        TrinhDoChuyenMon.all.each do |td|
          if params["td_#{td.id}"]
            @trinh_do_chuyen_mon_ids.push td.id
            @trinh_do_chuyen_mons.push td.trinh_do
            @params.push "td_#{td.id}=#{params["td_#{td.id}"]}"
          end
        end

        @hash_dv_tdcm = hash_trinh_do_chuyen_mon(@don_vi_ids, @trinh_do_chuyen_mon_ids)
        @hash.merge! :tdcm => @hash_dv_tdcm
      end

      if params["lld_chk"]
        @params.push "lld_chk=#{params["lld_chk"]}"
        LoaiLaoDong.all.each do |lld|
          if params["lld_#{lld.id}"]
            @loai_lao_dong_ids.push lld.id
            @loai_lao_dongs.push lld.ten_loai_lao_dong
            @params.push "lld_#{lld.id}=#{params["lld_#{lld.id}"]}"
          end
        end

        @hash_dv_lld = hash_loai_lao_dong(@don_vi_ids, @loai_lao_dong_ids)
        @hash.merge! :lld => @hash_dv_lld
      end

      if params["cv_chk"]
        @params.push "cv_chk=#{params["cv_chk"]}"
        CongViec.all.each do |cv|
          if params["cv_#{cv.id}"]
            @cong_viec_ids.push cv.id
            @cong_viecs.push cv.ten_cong_viec
            @params.push "cv_#{cv.id}=#{params["cv_#{cv.id}"]}"
          end
        end

        @hash_dv_cv = hash_cong_viec(@don_vi_ids, @cong_viec_ids)  
        @hash.merge! :cv => @hash_dv_cv
      end

      if params["age_chk"]
        @params.push "age_chk=#{params["age_chk"]}"
        @range_of_age = params[:range] || ""

        @hash_dv_age = hash_age(@don_vi_ids, @range_of_age)
        @hash.merge! :age => @hash_dv_age
      end
      @shadow = {:lld => 0, :tdcm => 0, :cv => 0, :age => 0}
      
      if !@hash_dv_lld.empty?
        @shadow[:lld] = @hash_dv_lld.first[1].count * 3
      end
      if !@hash_dv_tdcm.empty?
        @shadow[:tdcm] = @hash_dv_tdcm.first[1].count * 3
      end
      if !@hash_dv_cv.empty?
        @shadow[:cv] = @hash_dv_cv.first[1].count
      end
      if !@hash_dv_age.empty?
        @shadow[:age] = @hash_dv_age.first[1].count
      end
      @count_clm = @shadow.map { |e| e[1]}.inject(0, &:+)

      #render view with multiple format
      respond_to do |f|
        f.html
        f.json { render :json => @count_clm }
        f.xls {
          book = Spreadsheet::Workbook.new
          header_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :center, :size => 13
          title_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :center
          sum_format = Spreadsheet::Format.new :color => :black, :weight => :bold, :align => :right
          list = book.create_worksheet :name => 'Can bo don vi - tong hop'
          list.row(2)[0]= "STT"
          list.row(2)[1] = "Don vi"
          count = []

          @don_vis.each_with_index { |h, index|
            count.push h[1].count
            row_index = 0
            h[1].each_with_index { |e, i|
              row_index = i + 4 + index*(count.first + 1)
              list.row(row_index)[0] = i + 1
              list.row(row_index)[1] = e[1]
            }
            list.row(row_index + 1)[1] = "TONG [#{index + 1}] : #{h[0][1]}"
            list.row(row_index + 1).default_format = sum_format
          }
          col_index = 0
          if @hash_dv_tdcm.count > 0
            xls_format_statistic_by_trinh_do_chuyen_mon(list, @shadow[:tdcm], @don_vis, @hash_dv_tdcm, @trinh_do_chuyen_mons, col_index)
            col_index += @trinh_do_chuyen_mons.count*3
          end
          if @hash_dv_cv.count > 0
            xls_format_statistic_by_cong_viec(list, @shadow[:cv], @don_vis, @hash_dv_cv, @cong_viecs, col_index)
            col_index += @cong_viecs.count  
          end
          if @hash_dv_lld.count > 0
            xls_format_statistic_by_loai_lao_dong(list, @shadow[:lld], @don_vis, @hash_dv_lld, @loai_lao_dongs, col_index)
            col_index += @loai_lao_dongs.count*3
          end
          if @hash_dv_age.count > 0
            xls_format_statistic_by_age(list, @shadow[:age], @don_vis, @hash_dv_age, @range_of_age.split(";").map { |e| "#{e}" }, col_index)              
            col_index += @range_of_age.split(";").count
          end
          
          
          
          list.column(1).width = 30
          @count_clm.times { |t|
            list.column(t + 2).width = 5
          }
          list.row(2).default_format = title_format
          list.row(3).default_format = title_format
          list.merge_cells(2, 0, 3, 0)
          list.merge_cells(2, 1, 3, 1)
          list.row(0)[0] = "THONG KE DON VI - TONG HOP"
          list.merge_cells(0, 0, 0, col_index + 1)
          list.row(0).default_format = header_format
          #output to blob object
          blob = StringIO.new("")
          book.write blob
          #respond with blob object as a file
          send_data blob.string, :type => :xls, :filename => "Thong_ke_can_bo_don_vi_tong_hop.xls"
        
        }
      end

    end

    def statistic_by_trinh_do_chuyen_mon
      @don_vi_ids = []
      @don_vis = {}
      @hash = {}
      @loai_don_vis = {}
      trinh_do_chuyen_mon_ids = []
      @trinh_do_chuyen_mons = []
      @params = []

      LoaiDonVi.all.each do |ldv|
        if params["ldv_#{ldv.id}"]
          @loai_don_vis.merge! ldv.id => ldv.ten_loai_don_vi
          @params.push "ldv_#{ldv.id}=#{params["ldv_#{ldv.id}"]}"         
        end
      end

      @loai_don_vis.each do |e|
        list = []
        DonVi.find_all_by_loai_don_vi_id(e[0]).each do |dv|
          if params["dv_#{dv.id}"]
            @don_vi_ids.push dv.id
            list.push [dv.id, dv.ten_don_vi]
            @params.push "dv_#{dv.id}=#{params["dv_#{dv.id}"]}"
          end
        end
        @don_vis.merge! e => list
      end

      TrinhDoChuyenMon.all.each do |td|
        if params["td_#{td.id}"]
          trinh_do_chuyen_mon_ids.push td.id
          @trinh_do_chuyen_mons.push td.trinh_do
          @params.push "td_#{td.id}=#{params["td_#{td.id}"]}"
        end
      end

      @hash = hash_trinh_do_chuyen_mon(@don_vi_ids, trinh_do_chuyen_mon_ids)

      respond_to do |f|
        f.html
        f.json { render :json => @hash }
        f.xls {
          book = Spreadsheet::Workbook.new
          header_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :center, :size => 13
          title_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :center
          sum_format = Spreadsheet::Format.new :color => :black, :weight => :bold, :align => :right
          list = book.create_worksheet :name => 'Can bo don vi - trinh do chuyen mon'
          
          list.row(2)[0]= "STT"
          list.row(2)[1] = "Don vi"
          count = []
          @don_vis.each_with_index { |h, index|
            count.push h[1].count
            row_index = 0
            h[1].each_with_index { |e, i|
              row_index = i + 4 + index*(count.first + 1)
              list.row(row_index)[0] = i + 1
              list.row(row_index)[1] = e[1]
            }
            list.row(row_index + 1)[1] = "TONG [#{index + 1}] : #{h[0][1]}"
            list.row(row_index + 1).default_format = sum_format
          }

          xls_format_statistic_by_trinh_do_chuyen_mon(list, @hash.first[1].count*3, @don_vis, @hash, @trinh_do_chuyen_mons, 0)
          
          list.row(2).default_format = header_format
          list.row(3).default_format = header_format
          list.merge_cells(2, 0, 3, 0)
          list.merge_cells(2, 1, 3, 1)
          col_index = @trinh_do_chuyen_mons.count*3
          list.row(0)[0] = "THONG KE DON VI - TRINH DO CHUYEN MON"
          list.merge_cells(0, 0, 0, col_index + 1)
          list.row(0).default_format = header_format
          #output to blob object
          blob = StringIO.new("")
          book.write blob
          #respond with blob object as a file
          send_data blob.string, :type => :xls, :filename => "Thong_ke_can_bo_don_vi_trinh_do_chuyen_mon.xls"
        
        }
      end
    end

    

    def statistic_by_loai_lao_dong
      @don_vi_ids = []
      @don_vis = {}
      @loai_don_vis = {}
      @hash = {}
      loai_lao_dong_ids = []
      @loai_lao_dongs = []
      @params = []

      LoaiDonVi.all.each do |ldv|
        if params["ldv_#{ldv.id}"]
          @loai_don_vis.merge! ldv.id => ldv.ten_loai_don_vi
          @params.push "ldv_#{ldv.id}=#{params["ldv_#{ldv.id}"]}"         
        end
      end

      @loai_don_vis.each do |e|
        list = []
        DonVi.find_all_by_loai_don_vi_id(e[0]).each do |dv|
          if params["dv_#{dv.id}"]
            @don_vi_ids.push dv.id
            list.push [dv.id, dv.ten_don_vi]
            @params.push "dv_#{dv.id}=#{params["dv_#{dv.id}"]}"
          end
        end
        @don_vis.merge! e => list
      end

      LoaiLaoDong.all.each do |lld|
        if params["lld_#{lld.id}"]
          loai_lao_dong_ids.push lld.id
          @loai_lao_dongs.push lld.ten_loai_lao_dong
          @params.push "lld_#{lld.id}=#{params["lld_#{lld.id}"]}"
        end
      end

      @hash = hash_loai_lao_dong(@don_vi_ids, loai_lao_dong_ids)

      respond_to do |f|
        f.html
        f.json {render :json => @hash}
        f.xls {
          book = Spreadsheet::Workbook.new
          header_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :center, :size => 13
          title_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :center
          sum_format = Spreadsheet::Format.new :color => :black, :weight => :bold, :align => :right
          list = book.create_worksheet :name => 'Can bo don vi - loai lao dong'
          
          list.row(2)[0]= "STT"
          list.row(2)[1] = "Don vi"
          count = []
          @don_vis.each_with_index { |h, index|
            count.push h[1].count
            row_index = 0
            h[1].each_with_index { |e, i|
              row_index = i + 4 + index*(count.first + 1)
              list.row(row_index)[0] = i + 1
              list.row(row_index)[1] = e[1]
            }
            list.row(row_index + 1)[1] = "TONG [#{index + 1}] : #{h[0][1]}"
            list.row(row_index + 1).default_format = sum_format
          }
          xls_format_statistic_by_loai_lao_dong(list, @hash.first[1].count * 3, @don_vis, @hash, @loai_lao_dongs, 0)
          list.row(2).default_format = header_format
          list.row(3).default_format = header_format
          list.merge_cells(2, 0, 3, 0)
          list.merge_cells(2, 1, 3, 1)
          col_index = @loai_lao_dongs.count*3
          list.row(0)[0] = "THONG KE DON VI - LOAI LAO DONG"
          list.merge_cells(0, 0, 0, col_index + 1)
          list.row(0).default_format = header_format
          
          #output to blob object
          blob = StringIO.new("")
          book.write blob
          #respond with blob object as a file
          send_data blob.string, :type => :xls, :filename => "Thong_ke_can_bo_don_vi_loai_lao_dong.xls"
        
        }
      end
    end

    def statistic_by_age
      @hash = {}
      @range_of_age = params[:range] || "0"
      @don_vi_ids = []
      @don_vis = {}
      @loai_don_vis = {}
      @params = []

      LoaiDonVi.all.each do |ldv|
        if params["ldv_#{ldv.id}"]
          @loai_don_vis.merge! ldv.id => ldv.ten_loai_don_vi
          @params.push "ldv_#{ldv.id}=#{params["ldv_#{ldv.id}"]}"         
        end
      end

      @loai_don_vis.each do |e|
        list = []
        DonVi.find_all_by_loai_don_vi_id(e[0]).each do |dv|
          if params["dv_#{dv.id}"]
            @don_vi_ids.push dv.id
            list.push [dv.id, dv.ten_don_vi]
            @params.push "dv_#{dv.id}=#{params["dv_#{dv.id}"]}"
          end
        end
        @don_vis.merge! e => list
      end

      @hash = hash_age @don_vi_ids, @range_of_age

      respond_to do |f|
        f.html
        f.json { render :json => @hash }
        f.xls {
          book = Spreadsheet::Workbook.new
          header_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :center, :size => 13
          title_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :center
          sum_format = Spreadsheet::Format.new :color => :black, :weight => :bold, :align => :right
          list = book.create_worksheet :name => 'Can bo don vi - do tuoi'
          
          list.row(2)[0] = "STT"
          list.row(2)[1] = "Don vi"
          count = []
          @don_vis.each_with_index { |h, index|
            count.push h[1].count
            row_index = 0
            h[1].each_with_index { |e, i|
              row_index = i + 4 + index*(count.first + 1)
              list.row(row_index)[0] = i + 1
              list.row(row_index)[1] = e[1]
            }
            list.row(row_index + 1)[1] = "TONG [#{index + 1}] : #{h[0][1]}"
            list.row(row_index + 1).default_format = sum_format
          }
          xls_format_statistic_by_age(list, @hash.first[1].count, @don_vis, @hash, @range_of_age.split(";").map { |e| "#{e}" }, 0)
          
          list.row(2).default_format = header_format
          list.row(3).default_format = header_format
          list.merge_cells(2, 0, 3, 0)
          list.merge_cells(2, 1, 3, 1)
          col_index = @range_of_age.split(";").count
          list.row(0)[0] = "THONG KE DON VI - DO TUOI"
          list.merge_cells(0, 0, 0, col_index + 1)
          list.row(0).default_format = header_format
          #output to blob object
          blob = StringIO.new("")
          book.write blob
          #respond with blob object as a file
          send_data blob.string, :type => :xls, :filename => "Thong_ke_can_bo_don_vi_do_tuoi.xls"
        
        }
      end
    end
    
    def statistic_by_cong_viec
      @don_vi_ids = []
      @loai_don_vis = {}
      @don_vis = {}
      cong_viec_ids = []
      @hash = {}
      @params = []
      @cong_viecs = []

      LoaiDonVi.all.each do |ldv|
        if params["ldv_#{ldv.id}"]
          @loai_don_vis.merge! ldv.id => ldv.ten_loai_don_vi
          @params.push "ldv_#{ldv.id}=#{params["ldv_#{ldv.id}"]}"         
        end
      end

      @loai_don_vis.each do |e|
        list = []
        DonVi.find_all_by_loai_don_vi_id(e[0]).each do |dv|
          if params["dv_#{dv.id}"]
            @don_vi_ids.push dv.id
            list.push [dv.id, dv.ten_don_vi]
            @params.push "dv_#{dv.id}=#{params["dv_#{dv.id}"]}"
          end
        end
        @don_vis.merge! e => list
      end

      CongViec.all.each do |cv|
        if params["cv_#{cv.id}"]
          cong_viec_ids.push cv.id
          @cong_viecs.push cv.ten_cong_viec
          @params.push "cv_#{cv.id}=#{params["cv_#{cv.id}"]}"
        end
      end

      @hash = hash_cong_viec @don_vi_ids, cong_viec_ids

      respond_to do |f|
        f.html
        f.json {render :json => @hash}
        f.xls {
          book = Spreadsheet::Workbook.new
          header_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :center, :size => 13
          title_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :center
          sum_format = Spreadsheet::Format.new :color => :black, :weight => :bold, :align => :right
          list = book.create_worksheet :name => 'Can bo don vi - do tuoi'
          
          list.row(2)[0] = "STT"
          list.row(2)[1] = "Don vi"
          count = []
          @don_vis.each_with_index { |h, index|
            count.push h[1].count
            row_index = 0
            h[1].each_with_index { |e, i|
              row_index = i + 4 + index*(count.first + 1)
              list.row(row_index)[0] = i + 1
              list.row(row_index)[1] = e[1]
            }
            list.row(row_index + 1)[1] = "TONG [#{index + 1}] : #{h[0][1]}"
            list.row(row_index + 1).default_format = sum_format
          }
          xls_format_statistic_by_cong_viec(list, @hash.first[1].count, @don_vis, @hash, @cong_viecs, 0)

          header_format = Spreadsheet::Format.new :color => :green, :weight => :bold, :align => :center
          list.row(2).default_format = header_format
          list.row(3).default_format = header_format
          list.merge_cells(2, 0, 3, 0)
          list.merge_cells(2, 1, 3, 1)
          col_index = @cong_viecs.count
          list.row(0)[0] = "THONG KE DON VI - CONG VIEC"
          list.merge_cells(0, 0, 0, col_index + 1)
          list.row(0).default_format = header_format
          #output to blob object
          blob = StringIO.new("")
          book.write blob
          #respond with blob object as a file
          send_data blob.string, :type => :xls, :filename => "Thong_ke_can_bo_don_vi_cong_viec.xls"
        
        }
      end
    end

    def hash_trinh_do_chuyen_mon don_vi_ids = [], trinh_do_chuyen_mon_ids = []
      hash = {}
      don_vi_ids.map { |dv_id|  
        group = {}
        trinh_do_chuyen_mon_ids.map { |td_id|  
          can_bos = CanBoThongTin.find(:all, conditions:["don_vi_id = ? AND id in (select can_bo_thong_tin_id from can_bo_trinh_dos where hoc_vi_id = ?)", dv_id, td_id]) || nil
          if can_bos
            count = 0
            m = 0
            item = {}
            can_bos.each do |cb|
              count += 1
              if cb.gioi_tinh #dem so can bo co gioi tinh la nam
                m += 1
              end
            end
            item.merge!({:nam => m, :nu => count - m, :tong => count})
            group.merge!("#{TrinhDoChuyenMon.find(td_id).trinh_do}" => item)
          end
        }
        hash.merge!("#{dv_id}" => group)
      }
      hash
    end

    def hash_loai_lao_dong don_vi_ids = [], loai_lao_dong_ids = []
      hash = {}
      don_vi_ids.map { |dv_id|  
        group = {}
        loai_lao_dong_ids.map { |lld_id|  
          can_bos = CanBoThongTin.find(:all, :conditions => ["don_vi_id = ? AND loai_lao_dong_id = ?", dv_id, lld_id])
          if can_bos
            count = 0
            m = 0
            item = {}
            can_bos.each_with_index { |c, index|
              count += 1
              if c.gioi_tinh
                m += 1
              end
            }
            item.merge!({:nam => m, :nu => count - m, :tong => count})
            group.merge!("#{LoaiLaoDong.find(lld_id).ten_loai_lao_dong}" => item)
          end
        }
        hash.merge!("#{dv_id}" => group)
      }

      hash
    end

    def hash_age don_vi_ids = [], range_of_age = []
      @ranges = range_of_age.split(";").map { |r| Param.magick(r) }
      hash = {}
      don_vi_ids.each do |dv_id|
        group = {}
        @ranges.map do |r|
          count = 0
          CanBoThongTin.find_all_by_don_vi_id(dv_id).each do |cb|
            if (r.include? cb.age)
              count += 1
            end
          end
          group.merge!({ "#{r}" => count})
        end
        hash.merge!("#{dv_id}" => group)
      end
      hash
    end

    def hash_cong_viec don_vi_ids = [], cong_viec_ids = []
      hash = {}
      don_vi_ids.map { |dv_id|  
        group = {}
        cong_viec_ids.map { |cv_id|  
          can_bos = CanBoThongTin.find(:all, conditions:["don_vi_id = ? AND id in (select can_bo_thong_tin_id from can_bo_cong_tacs where cong_viec_id = ?)", dv_id, cv_id]) || nil
          if can_bos
            count = 0
            can_bos.each do |cb|
              count += 1
            end
            group.merge!("#{CongViec.find(cv_id).ten_cong_viec}" => count)
          end
        }
        hash.merge!("#{dv_id}" => group)
      }
      hash
    end

    def xls_format_statistic_by_trinh_do_chuyen_mon list = Spreadsheet::Workbook.new.create_worksheet, count_clm, don_vis, hash, trinh_do_chuyen_mons, start_column
                  
          trinh_do_chuyen_mons.each_with_index { |e, i|  
            list.row(2)[(i + 1)*3 - 1 + start_column] = e
            list.row(3)[(i + 1)*3 - 1 + start_column] = "Nam"
            list.row(3)[(i + 1)*3 + start_column] = "Nu"
            list.row(3)[(i + 1)*3 + 1 + start_column] = "+"
          }
          #init shadow and f_sum
          shadow = Array.new(don_vis.count) { |i|  0}
          
          don_vis.each_with_index { |don_vi, index|
            f_sum = Array.new(count_clm) { |i|  0} 
            
            don_vi[1].each_with_index { |dv, i|
              arr = []
              hash["#{dv[0]}"].each_with_index { |h, i|
                h[1].each_with_index { |clm, iclm|
                  arr.push clm[1]
                  f_sum[iclm + i*3] += clm[1]
                } 
              }
              arr.each_with_index { |e, ie|  
                row_index = i + 4 + shadow.inject(&:+) + index
                list.row(row_index)[ie + 2 + start_column] = e
              }
            }

            #add number of don_vi to shadow with index
            shadow[index] = don_vi[1].count

            row_index = 4 + shadow.inject(&:+) + index
            f_sum.each_with_index { |e, ie|  
              list.row(row_index)[ie + 2 + start_column] = e
            }

            
          }
          
          trinh_do_chuyen_mons.each_with_index { |e, i|  
            s = (i + 1) * 3 - 1 + start_column
            list.merge_cells(2, s, 2, s + 2)
          }
    end

    def xls_format_statistic_by_loai_lao_dong(list = Spreadsheet::Workbook.new.create_worksheet, count_clm, don_vis, hash, loai_lao_dongs, start_column)
        loai_lao_dongs.each_with_index { |e, i|  
          list.row(2)[(i + 1)*3 - 1 + start_column] = e
          list.row(3)[(i + 1)*3 - 1 + start_column] = "Nam"
          list.row(3)[(i + 1)*3 + start_column] = "Nu"
          list.row(3)[(i + 1)*3 + 1 + start_column] = "+"
        }
         #init shadow and f_sum
          shadow = Array.new(don_vis.count) { |i|  0}
          
          don_vis.each_with_index { |don_vi, index|
            f_sum = Array.new(count_clm) { |i|  0} 
            
            don_vi[1].each_with_index { |dv, i|
              arr = []
              hash["#{dv[0]}"].each_with_index { |h, i|
                h[1].each_with_index { |clm, iclm|
                  arr.push clm[1]
                  f_sum[iclm + i*3] += clm[1]
                } 
              }
              arr.each_with_index { |e, ie|  
                row_index = i + 4 + shadow.inject(&:+) + index
                list.row(row_index)[ie + 2 + start_column] = e
              }
            }

            #add number of don_vi to shadow with index
            shadow[index] = don_vi[1].count

            row_index = 4 + shadow.inject(&:+) + index
            f_sum.each_with_index { |e, ie|  
              list.row(row_index)[ie + 2 + start_column] = e
            }         
        }
        loai_lao_dongs.each_with_index { |e, i|  
          s = (i + 1) * 3 - 1 + start_column
          list.merge_cells(2, s, 2, s + 2)
        }
    end

    def xls_format_statistic_by_age(list = Spreadsheet::Workbook.new.create_worksheet, count_clm, don_vis, hash, range_of_age, start_column)
      
      range_of_age.each_with_index { |e, i| 
        list.row(2)[i + 2 + start_column] = "#{e} tuoi"
        list.merge_cells(2, start_column + i + 2, 3, start_column + i + 2) 
      }
      #init shadow and f_sum
      shadow = Array.new(don_vis.count) { |i|  0}
      don_vis.each_with_index { |don_vi, index|
        f_sum = Array.new(count_clm) { |i|  0} 
        
        don_vi[1].each_with_index { |dv, idv|
          arr = []
          hash["#{dv[0]}"].each_with_index { |h, i|
            
            arr.push h[1]
            f_sum[i] += h[1]
            
          }
          arr.each_with_index { |e, ie|  
            row_index = idv + 4 + shadow.inject(&:+) + index
            list.row(row_index)[ie + 2 + start_column] = e
          }
          
        }

        #add number of don_vi to shadow with index
        shadow[index] = don_vi[1].count

        row_index = 4 + shadow.inject(&:+) + index
        f_sum.each_with_index { |e, ie|  
          list.row(row_index)[ie + 2 + start_column] = e
        }
      }
    end

    def xls_format_statistic_by_cong_viec(list = Spreadsheet::Workbook.new.create_worksheet, count_clm, don_vis, hash, cong_viecs, start_column)
      cong_viecs.each_with_index {|e, i|
        list.row(2)[i + 2 + start_column] = "#{e}"
        list.merge_cells(2, start_column + i + 2, 3, start_column + i + 2)
      }
      #init shadow and f_sum
      shadow = Array.new(don_vis.count) { |i|  0}
      don_vis.each_with_index { |don_vi, index|
        f_sum = Array.new(count_clm) { |i|  0} 
        
        don_vi[1].each_with_index { |dv, idv|
          arr = []
          hash["#{dv[0]}"].each_with_index { |h, i|
            
            arr.push h[1]
            f_sum[i] += h[1]
            
          }
          arr.each_with_index { |e, ie|  
            row_index = idv + 4 + shadow.inject(&:+) + index
            list.row(row_index)[ie + 2 + start_column] = e
          }
          
        }

        #add number of don_vi to shadow with index
        shadow[index] = don_vi[1].count

        row_index = 4 + shadow.inject(&:+) + index
        f_sum.each_with_index { |e, ie|  
          list.row(row_index)[ie + 2 + start_column] = e
        }
      }
    end

    def show_result
      @errors = Hash.new
      @errors = params[:errors]
      respond_to do |format|
        format.html
        format.json {head :no_content}
      end
    end

    # get random_record
    def random_record
      
    end

    # post exe_random_record
    def exe_random_record
      gender = params[:gender] || true
      f_or_m = "f"
      if gender
        f_or_m = "m"
      end
      f_f = Rails.root.join("r_suite/#{f_or_m}_first.txt") || ""
      m_f = Rails.root.join("r_suite/#{f_or_m}_mid.txt") || ""
      l_f = Rails.root.join("r_suite/#{f_or_m}_last.txt") || ""
      w_f = Rails.root.join("r_suite/w_file.txt") || ""
      p_f = Rails.root.join("r_suite/p_file.txt") || ""
      record = params[:num_record] || 0
      @message = "executing..."
      if (f_f != "") && (m_f != "") && (l_f != "") && (w_f != "") && (p_f != "")
        f = File.open(f_f, "rb").read().split(",")
        m = File.open(m_f, "rb").read().split(",")
        l = File.open(l_f, "rb").read().split(",")
        w = File.open(w_f, "rb").read().split(",")
        p = File.open(p_f, "rb").read().split(",")
        if !f.empty? && !m.empty? && !l.empty? && !w.empty? && !p.empty? && record.to_i > 0
          CanBoThongTin.random_record gender, f, m, l, p, w, record.to_i
          @message = "Completed!"
          redirect_to casein_can_bo_thong_tins_path
        else
          redirect_to random_record_casein_can_bo_thong_tins_path
        end
      else
        redirect_to random_record_casein_can_bo_thong_tins_path
      end
    end

    private
    def set_object
      begin
        @can_bo_thong_tin = CanBoThongTin.find(params[:id])
      rescue Exception => e
        render_404
      end
    end

    def load_combo
      @ngachs = Ngach.select("id, ma_ngach, ten_ngach")
      @ngach_bacs = BacLuong.select("id, ngach_id, bac")
      @loai_lao_dongs = LoaiLaoDong.select("id, ten_loai_lao_dong")
      @don_vis = DonVi.select("id, ten_don_vi")
    end

  end
end
# Scaffolding generated by Casein v.3.1.11

module Casein
  class ParamsController < Casein::CaseinController
  
    ## optional filters for defining usage according to Casein::Users access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = Param.get_param_value("param_index_page_title")
      search_value = params["keyword"]
      if search_value != nil
        @params = Param.search(search_value).sort_by("param_name").paginate(:per_page => 10, :page => params[:page])
        @params_xls = Param.search(search_value)
        if @params.count == 0
          flash.now[:warning] = Param.get_param_value("searching_has_no_result")
          @params = Param.paginate :page => params[:page], :per_page => 10, :order => "param_name"
          @params_xls = Param.all
        else
          flash.now[:notice] = "#{Param.get_param_value("number_searching_result")} #{@params.count}"
        end
      else
        @params = Param.paginate :page => params[:page], :per_page => 10, :order => "param_name"
        @params_xls = Param.all
      end
      respond_to do |format|
        format.html
        format.xls {
          param_list = Spreadsheet::Workbook.new
          list = param_list.create_worksheet :name => 'Listing params'
          list.row(0).concat %w{Param_name Param_value Options Description}
          @params_xls.each_with_index { |param, i|
            list.row(i+1).push param.param_name, param.param_value, param.options, param.description
          }
          header_format = Spreadsheet::Format.new :color => :green, :weight => :bold
          list.row(0).default_format = header_format
          #output to blob object
          blob = StringIO.new("")
          param_list.write blob
          #respond with blob object as a file
          send_data blob.string, :type => :xls, :filename => "Danh_sach_tham_so.xls"
        }
      end
    end
  
    def show
      @casein_page_title = Param.get_param_value("param_show_page_title")
      @param = Param.find params[:id]
    end
 
    def new
      @casein_page_title = Param.get_param_value("param_new_page_title")
    	@param = Param.new
    end

    def create
      @param = Param.new params[:param]
    
      if @param.save
        flash[:notice] = Param.get_param_value("adding_success")
        redirect_to casein_params_path
      else
        flash.now[:warning] = Param.get_param_value("adding_false")
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = Param.get_param_value("param_update_page_title")
      
      @param = Param.find params[:id]
    
      if @param.update_attributes params[:param]
        flash[:notice] = Param.get_param_value("updating_success")
        redirect_to casein_params_path
      else
        flash.now[:warning] = Param.get_param_value("updating_false")
        render :action => :show
      end
    end
 
    def destroy
      @param = Param.find params[:id]

      @param.destroy
      flash[:notice] = Param.get_param_value("deleting_success")
      redirect_to casein_params_path
    end
    def import_from_excel
       @casein_page_title = Param.get_param_value("param_import_from_excel_page_title")
    end

    def parse_save_from_excel
      file_path = params[:excel_file]
      file = XlsUploader.new
      file.store!(file_path)

      book = Spreadsheet.open "public/#{file.store_path}"

      sheet = book.worksheet 0  # first sheet in the spreadsheet file will be used

      @errors = Hash.new
      @counter = 0
      @commit = 0
      @wrong = 0
      sheet.each 1 do |row|
        @counter += 1
        p = Param.new
        p.param_name = row[0].to_s
        p.param_value = row[1].to_s
        p.options = row[2].to_s
        p.description = row[3].to_s

        if p.valid?
          @commit += 1
          p.save
        else
          @errors["#{@counter + 1}"] = p.errors
          @wrong += 1
        end
      end
      book.io.close
      if @wrong == 0
        flash[:notice] = "#{Param.get_param_value "import_success"} | #{Param.get_param_value "commit"}: #{@commit}/#{@counter} | #{Param.get_param_value "wrong"}: #{@wrong}"
        file.remove!
        redirect_to casein_params_path
      else
        flash[:notice] = "#{Param.get_param_value "import_success"} | #{Param.get_param_value "commit"}: #{@commit}/#{@counter} | #{Param.get_param_value "wrong"}: #{@wrong}"
        file.remove!
        render :action => 'show_result', :errors => @errors
      end

    end



    def show_result
      @casein_page_title = Param.get_param_value("param_show_result_page_title")
      @errors = Hash.new
      @errors = params[:errors]
      respond_to do |format|
        format.html
        format.json {head :no_content}
      end
    end

    def website_config
      @casein_page_title = Param.get_param_value("param_website_config_page_title")
    end

    def save_change_config
      if !params[:website_name].blank?
        p = Param.find_by_param_name(params[:website_name])
        if p
          p.update_attributes(:param_value => params[:website_name])
        else
          p = Param.new(:param_name => "website_name", :param_value => params[:website_name])
          p.save
        end
      end
      if !params[:lo_go].blank?
        p = Param.find_by_param_name(params[:lo_go])
        if p
          p.update_attributes(:param_value => params[:lo_go])
        else
          p = Param.new(:param_name => "lo_go", :param_value => params[:lo_go])
          p.save
        end
      end

      if !params[:favicon].blank?
        p = Param.find_by_param_name(params[:favicon])
        if p
          p.update_attributes(:param_value => params[:favicon])
        else
          p = Param.new(:param_name => "favicon", :param_value => params[:favicon])
          p.save
        end
      end

      redirect_to casein_blank_url
    end


  end
end
# Scaffolding generated by Casein v.3.1.11

module Casein
  class ThanNhansController < Casein::CaseinController
  
    ## optional filters for defining usage according to Casein::Users access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
    before_filter :set_object, only: [:edit, :show, :update, :destroy]

=begin
def index
      @casein_page_title = Param.get_param_value('than_nhan_index_page_title')
      search_value = params["keyword"]
      if search_value
        @than_nhans = ThanNhan.search(search_value).paginate(:per_page => 10, :order => "can_bo_thong_tin_id", :page => params[:page])
        @than_nhans_xls = ThanNhan.search(search_value)
        if @than_nhans.count == 0
          flash.now[:warning] = Param.get_param_value("searching_has_no_result")
          @than_nhans = ThanNhan.paginate :page => params[:page], :per_page => 10, :order => "can_bo_thong_tin_id"
          @than_nhans_xls = ThanNhan.all
        else
          flash.now[:notice] = "#{Param.get_param_value("number_searching_result")} #{@than_nhans.count}"
        end
      else
        @than_nhans = ThanNhan.paginate :per_page => 10, :page => params[:page], :order => "can_bo_thong_tin_id"
        @than_nhans_xls = ThanNhan.all
      end

      respond_to do |format|
        format.html
        format.xls{
          than_nhan = Spreadsheet::Workbook.new
          list = than_nhan.create_worksheet :name => 'Danh sach than nhan'
          list.row(0).concat %w{Ma_CB Ho_ten_Can_bo Ho_ten_Than_nhan Quan_he Nam_sinh Nghe_nghiep}
          @than_nhans_xls.each_with_index { |than_nhan, i|
            list.row(i+1).push(than_nhan.can_bo_thong_tin.ma_cb, than_nhan.can_bo_thong_tin.ho_ten, than_nhan.ho_ten, than_nhan.quan_he_gia_dinh.ten_quan_he, than_nhan.nam_sinh, than_nhan.nghe_nghiep)
          }

          header_format = Spreadsheet::Format.new :color => :green, :weight => :bold
          list.row(0).default_format = header_format
          #output to blob object
          blob = StringIO.new("")
          than_nhan.write blob
          #respond with blob object as a file
          send_data blob.string, :type => :xls, :filename => "Danh_Sach_Than_Nhan.xls"
        }
      end
    end
=end
    def index
      @can_bos = CanBoThongTin.select("id, ma_cb, ho_ten").paginate :page => params[:page], :per_page => params[:per_page]
    end
    
    def details
      ma_cb = params[:ma_cb]
      can_bo_thong_tin = CanBoThongTin.find_by_ma_cb(ma_cb)
      if can_bo_thong_tin
        @can_bo_thong_tin = can_bo_thong_tin
        @than_nhans =  ThanNhan.find_all_by_can_bo_thong_tin_id(can_bo_thong_tin.id)
      else
        render_404
      end
      
    end

    def edit
      
    end    

    def show
      @casein_page_title = Param.get_param_value('than_nhan_show_page_title')
    end
 
    def new
      @casein_page_title = Param.get_param_value('than_nhan_new_page_title')
    	@than_nhan = ThanNhan.new
    end

    def create
      @than_nhan = ThanNhan.new params[:than_nhan]
    
      if @than_nhan.save
        flash[:notice] = Param.get_param_value('adding_success')
        redirect_to details_casein_than_nhans_path(:ma_cb => @than_nhan.can_bo_thong_tin.ma_cb)
      else
        flash.now[:warning] = 'There were problems when trying to create a new than nhan'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = Param.get_param_value('than_nhan_update_page_title')
    
      if @than_nhan.update_attributes params[:than_nhan]
        flash[:notice] = Param.get_param_value('updating_success')
        redirect_to details_casein_than_nhans_path(:ma_cb => @than_nhan.can_bo_thong_tin.ma_cb)
      else
        flash.now[:warning] = Param.get_param_value('updating_false')
        render :action => :show
      end
    end
 
    def destroy
      @than_nhan.destroy
      flash[:notice] = Param.get_param_value('deleting_success')
      redirect_to casein_than_nhans_path
    end


    def import_from_excel
      @casein_page_title = Param.get_param_value("than_nhan_import_from_excel_page_title")
    end

    def parse_save_from_excel
      if params[:excel_file]
      file_path = params[:excel_file]
      file = XlsUploader.new
      file.store!(file_path)

      book = Spreadsheet.open "public/#{file.store_path}"

      sheet = book.worksheet 0  # first sheet in the spreadsheet file will be used

      @errors = Hash.new
      @counter = 0
      @commit = 0
      @wrong = 0
      sheet.each 1 do |row|
        @counter += 1
        can_bo = CanBoThongTin.find_by_ma_cb(row[0].to_i.to_s)

        if can_bo
          p = ThanNhan.new
          p.can_bo_thong_tin_id = can_bo.id
          p.quan_he_gia_dinh_id = ThanNhan.get_quan_he_id(row[2].to_s, true)
          p.ho_ten = row[1].to_s
          p.nam_sinh = row[3].to_i
          p.nghe_nghiep = row[4].to_s

          if p.valid? && p.quan_he_gia_dinh_id != 0
            if ThanNhan.is_duplicated({:can_bo_thong_tin_id => p.can_bo_thong_tin_id, :ho_ten => p.ho_ten}).count == 0
              @commit += 1
              p.save
            else
              @errors["#{@counter + 1}"] = "CB.#{row[0].to_i.to_s} - #{row[1].to_s} - #{row[2].to_s}"
              @wrong += 1
            end
          else
            @errors["#{@counter + 1}"] = "CB.#{row[0].to_i.to_s} - #{row[1].to_s} - #{row[2].to_s}"
            @wrong += 1
          end
        end
      end
      book.io.close
      if @wrong == 0
        flash[:notice] = "#{Param.get_param_value "import_success"} | #{Param.get_param_value "commit"}: #{@commit}/#{@counter} | #{Param.get_param_value "wrong"}: #{@wrong}"
        file.remove!
        redirect_to casein_than_nhans_path
      else
        flash[:notice] = "#{Param.get_param_value "import_success"} | #{Param.get_param_value "commit"}: #{@commit}/#{@counter} | #{Param.get_param_value "wrong"}: #{@wrong}"
        file.remove!
        render :action => 'show_result', :errors => @errors
      end

      else #if :excel_file is null
        flash[:warning] = Param.get_param_value ("let_choose_file_now")
        redirect_to import_from_excel_casein_than_nhans_path
      end

    end

    def show_result
      @casein_page_title = Param.get_param_value("than_nhan_show_result_page_title")
      @errors = Hash.new
      @errors = params[:errors]
      respond_to do |format|
        format.html
        format.json {head :no_content}
      end
    end

    private
    def set_object
      than_nhan = ThanNhan.find params[:id]
      if than_nhan
        @than_nhan = than_nhan
      else
        render_404
      end
    end

  end
end
# Scaffolding generated by Casein v.3.1.11

module Casein
  class ChuyenNganhsController < Casein::CaseinController
  
    ## optional filters for defining usage according to Casein::Users access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = Param.get_param_value("chuyen_nganh_index_page_title")
      search_value = params["keyword"]
      if search_value != nil
        @chuyen_nganhs = ChuyenNganh.search(search_value).paginate(:per_page => 10, :page => params[:page])
        @chuyen_nganhs_xls = ChuyenNganh.search(search_value)
        if @chuyen_nganhs.count == 0
          flash.now[:warning] = Param.get_param_value("searching_has_no_result")
          @chuyen_nganhs = ChuyenNganh.paginate :page => params[:page], :per_page => 10
          @chuyen_nganhs_xls = ChuyenNganh.all
        else
          flash.now[:notice] = "#{Param.get_param_value("number_searching_result")} #{@chuyen_nganhs.count}"
        end
      else
        @chuyen_nganhs = ChuyenNganh.paginate :page => params[:page], :per_page => 10
        @chuyen_nganhs_xls = ChuyenNganh.all
      end

      respond_to do |format|
        format.html
        format.xls {
          chuyen_nganh = Spreadsheet::Workbook.new
          list = chuyen_nganh.create_worksheet :name => 'Danh sach chuyen nganh'
          list.row(0).concat %w{Ten_chuyen_nganh Ghi_chu}
          @chuyen_nganhs_xls.each_with_index { |chuyen_nganh, i|

            list.row(i+1).push chuyen_nganh.ten_chuyen_nganh, chuyen_nganh.ghi_chu
          }
          header_format = Spreadsheet::Format.new :color => :green, :weight => :bold
          list.row(0).default_format = header_format
          #output to blob object
          blob = StringIO.new("")
          chuyen_nganh.write blob
          #respond with blob object as a file
          send_data blob.string, :type => :xls, :filename => "Danh_Sach_Chuyen_nganh.xls"
        }
      end
    end
  
    def show
      @casein_page_title = Param.get_param_value("chuyen_nganh_view_page_title")
      @chuyen_nganh = ChuyenNganh.find params[:id]
    end
 
    def new
      @casein_page_title = Param.get_param_value("chuyen_nganh_new_page_title")
    	@chuyen_nganh = ChuyenNganh.new
    end

    def create
      @chuyen_nganh = ChuyenNganh.new params[:chuyen_nganh]
    
      if @chuyen_nganh.save
        flash[:notice] = Param.get_param_value("adding_success")
        redirect_to casein_chuyen_nganhs_path
      else
        flash.now[:warning] = Param.get_param_value("adding_false")
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = Param.get_param_value("chuyen_nganh_update_page_title")
      
      @chuyen_nganh = ChuyenNganh.find params[:id]
    
      if @chuyen_nganh.update_attributes params[:chuyen_nganh]
        flash[:notice] = Param.get_param_value("updating_success")
        redirect_to casein_chuyen_nganhs_path
      else
        flash.now[:warning] = Param.get_param_value("updating_false")
        render :action => :show
      end
    end
 
    def destroy
      @chuyen_nganh = ChuyenNganh.find params[:id]

      @chuyen_nganh.destroy
      flash[:notice] = Param.get_param_value("deleting_success")
      redirect_to casein_chuyen_nganhs_path
    end

    def import_from_excel
      @casein_page_title = Param.get_param_value("chuyen_nganh_import_from_excel_page_title")
    end

    def parse_save_from_excel
      if params[:excel_file]
        file_path = params[:excel_file]
        file = XlsUploader.new
        file.store!(file_path)

        book = Spreadsheet.open "public/#{file.store_path}"

        sheet = book.worksheet 0  # first sheet in the spreadsheet file will be used

        @errors = Hash.new
        @counter = 0
        @commit = 0
        @wrong = 0
        sheet.each 1 do |row|
          @counter += 1
          p = ChuyenNganh.new
          p.ten_chuyen_nganh = row[0].to_s
          p.ghi_chu = row[1].to_s

          if p.valid?
            @commit += 1
            p.save
          else
            @errors["#{@counter + 1}"] = p.errors
            @wrong += 1
          end
        end
        book.io.close
        if @wrong == 0
          flash[:notice] = "#{Param.get_param_value "import_success"} | #{Param.get_param_value "commit"}: #{@commit}/#{@counter} | #{Param.get_param_value "wrong"}: #{@wrong}"
          file.remove!
          redirect_to casein_chuyen_nganhs_path
        else
          flash[:notice] = "#{Param.get_param_value "import_success"} | #{Param.get_param_value "commit"}: #{@commit}/#{@counter} | #{Param.get_param_value "wrong"}: #{@wrong}"
          file.remove!
          render :action => 'show_result', :errors => @errors
        end

      else #if :excel_file is null
        flash[:warning] = Param.get_param_value ("let_choose_file_now")
        redirect_to import_from_excel_casein_chuyen_nganhs_path
      end

    end

    def show_result
      @casein_page_title = Param.get_param_value("chuyen_nganh_show_result_page_title")
      @errors = Hash.new
      @errors = params[:errors]
      respond_to do |format|
        format.html
        format.json {head :no_content}
      end
    end

  end
end
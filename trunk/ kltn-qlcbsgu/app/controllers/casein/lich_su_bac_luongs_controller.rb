# Scaffolding generated by Casein v.3.1.11

module Casein
  class LichSuBacLuongsController < Casein::CaseinController
  
    ## optional filters for defining usage according to Casein::Users access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Lich su bac luongs'
      search_value = params["keyword"]
      if search_value != nil
        @lich_su_bac_luongs = LichSuBacLuong.search(search_value).paginate(:per_page => 10, :page => params[:page],:order=> :can_bo_thong_tin_id)
        @lich_su_bac_luongs_xls = LichSuBacLuong.search(search_value)
        if @lich_su_bac_luongs.count == 0
          flash.now[:warning] = Param.get_param_value("searching_has_no_result")
          @lich_su_bac_luongs = LichSuBacLuong.paginate :page => params[:page], :per_page => 10 ,:order=> :can_bo_thong_tin_id
          @lich_su_bac_luongs_xls = LichSuBacLuong.all
        else
          flash.now[:notice] = "#{Param.get_param_value("number_searching_result")} #{@lich_su_bac_luongs.count}"
        end
      else
        @lich_su_bac_luongs = LichSuBacLuong.paginate :page => params[:page], :per_page => 10 ,:order=> :can_bo_thong_tin_id
        @lich_su_bac_luongs_xls = LichSuBacLuong.all
      end

      respond_to do |format|
        format.html
        format.xls {
          can_bo = Spreadsheet::Workbook.new
          list = can_bo.create_worksheet :name => 'Lich Su Bac Luong'
          list.row(0).concat %w{Ma_can_bo Can_bo Ngach Bac_luong Ngay_thay_doi Ghi_chu}
          @lich_su_bac_luongs_xls.each_with_index { |lichsu, i|
            list.row(i+1).push lichsu.can_bo_thong_tin.ma_cb,lichsu.can_bo_thong_tin.ho_ten,lichsu.bac_luong.ngach.ten_ngach,lichsu.bac_luong.bac,lichsu.ngay_thay_doi_bac,lichsu.ghi_chu
          }
          header_format = Spreadsheet::Format.new :color => :green, :weight => :bold
          list.row(0).default_format = header_format
          #output to blob object
          blob = StringIO.new("")
          can_bo.write blob
          #respond with blob object as a file
          send_data blob.string, :type => :xls, :filename => "LichSuBacLuong.xls"
        }
      end

  		#@lich_su_bac_luongs = LichSuBacLuong.paginate :page => params[:page]
    end
  
    def show
      @casein_page_title = 'View lich su bac luong'
      @lich_su_bac_luong = LichSuBacLuong.find params[:id]
    end
 
    def new
      @casein_page_title = 'Add a new lich su bac luong'
    	@lich_su_bac_luong = LichSuBacLuong.new
    end

    def create
      @lich_su_bac_luong = LichSuBacLuong.new params[:lich_su_bac_luong]
      
      if @lich_su_bac_luong.save
        bac_luong_id = @lich_su_bac_luong.bac_luong_id
        p = nil
        p = CanBoThongTin.find(@lich_su_bac_luong.can_bo_thong_tin_id)
        if p != nil
          p.update_attribute(:bac_luong_id, bac_luong_id)
        end

        flash[:notice] = Param.get_param_value("adding_success")
        redirect_to casein_lich_su_bac_luongs_path
      else
        flash.now[:warning] = Param.get_param_value("adding_false")
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update lich su bac luong'
      
      @lich_su_bac_luong = LichSuBacLuong.find params[:id]
      

      if @lich_su_bac_luong.update_attributes params[:lich_su_bac_luong]
        lich_su_last = LichSuBacLuong.get_last(@lich_su_bac_luong.can_bo_thong_tin_id)
        if lich_su_last.id == @lich_su_bac_luong.id
          bac_luong_id = @lich_su_bac_luong.bac_luong_id
          p = nil
          p = CanBoThongTin.find(@lich_su_bac_luong.can_bo_thong_tin_id)
          if p != nil
            p.update_attribute(:bac_luong_id, bac_luong_id)
          end
        end
        flash[:notice] = Param.get_param_value("updating_success")
        redirect_to casein_lich_su_bac_luongs_path
      else
        flash.now[:warning] = Param.get_param_value("updating_false")
        render :action => :show
      end
    end
 
    def destroy
      @lich_su_bac_luong = LichSuBacLuong.find params[:id]

      @lich_su_bac_luong.destroy
      flash[:notice] = Param.get_param_value("deleting_success")
      redirect_to casein_lich_su_bac_luongs_path
    end
    def import_from_excel
      @casein_page_title = Param.get_param_value("lich_su_bac_luong_import_from_excel_page_title")
    end

    def parse_save_from_excel
      if params[:excel_file]
      file_path = params[:excel_file]
      file = XlsUploader.new
      file.store!(file_path)

      book = Spreadsheet.open "public/#{file.store_path}"

      sheet = book.worksheet 0  # first sheet in the spreadsheet file will be used

      @errors = Hash.new
      @counter = 0
      @commit = 0
      @wrong = 0
      sheet.each 1 do |row|
        @counter += 1
        p = LichSuBacLuong.new
        canbo = CanBoThongTin.find_by_ma_cb(row[0].to_i.to_s)
        if canbo
          p.can_bo_thong_tin_id = canbo.id
          p.ngay_thay_doi_bac = row[4].to_date
          p.ghi_chu = row[5].to_s

          ngach = Ngach.find_by_ten_ngach(row[2].to_s)
          if ngach
            bl = BacLuong.find(:first, :conditions =>['ngach_id = ? and bac = ?', ngach.id , row[3].to_i])
            if bl
                 p.bac_luong_id = bl.id
            else
              @wrong += 1
              @errors["#{@counter + 1}"] = "CB.#{row[0].to_i.to_s} - #{row[1].to_s}"
            end
          else
            @wrong += 1
            @errors["#{@counter + 1}"] = "CB.#{row[0].to_i.to_s} - #{row[1].to_s}"
          end

          if p.valid?
            @commit += 1
            p.save
          else
            @wrong += 1
            @errors["#{@counter + 1}"] = "CB.#{row[0].to_i.to_s} - #{row[1].to_s}"
          end
        else
          @wrong += 1
          @errors["#{@counter + 1}"] = "CB.#{row[0].to_i.to_s} - #{row[1].to_s}"
        end
      end
      book.io.close
      if @wrong == 0
        flash[:notice] = "#{Param.get_param_value "import_success"} | #{Param.get_param_value "commit"}: #{@commit}/#{@counter} | #{Param.get_param_value "wrong"}: #{@wrong}"
        file.remove!
        redirect_to casein_lich_su_bac_luongs_path
      else
        flash[:notice] = "#{Param.get_param_value "import_success"} | #{Param.get_param_value "commit"}: #{@commit}/#{@counter} | #{Param.get_param_value "wrong"}: #{@wrong}"
        file.remove!
        render :action => 'show_result', :errors => @errors
      end

      else #if :excel_file is null
        flash[:warning] = Param.get_param_value ("let_choose_file_now")
        redirect_to import_from_excel_casein_lich_su_bac_luongs_path
      end

    end

    def show_result
      @casein_page_title = Param.get_param_value("can_bo_li_lich_ct_show_result_page_title")
      @errors = Hash.new
      @errors = params[:errors]
      respond_to do |format|
        format.html
        format.json {head :no_content}
      end
    end
  end
end